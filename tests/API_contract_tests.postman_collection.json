{
	"info": {
		"_postman_id": "d637124d-d969-4ddd-a75d-94a3a74f17bc",
		"name": "API_contract_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Client application smoke test",
			"item": [
				{
					"name": "login to tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c4ded2f-ef12-4f83-af32-57805d9c5180",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the logged in users profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b13b6ab-75cc-4328-806e-d65b44978d33",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "invite another user see data",
					"event": [
						{
							"listen": "test",
							"script": {

								"id": "cf61597f-a5ec-4568-8880-ed7a7f04514d",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {

								"id": "da6d002d-8fd2-48c6-8d0e-eb428a44f89b",
								"exec": [
									"const emailName = pm.environment.get(\"sharingEmailName\");",
									"let emailAddress = emailName+ \"+sharing_\" + Date.now() + \"@tidepool.org\";",
									"pm.variables.set(\"sharingEmailAddress\", emailAddress);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{sharingEmailAddress}}\",\n  \"permissions\": {\n    \"view\": {}\n  }\n}"
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a note for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e75d7e24-49f2-46d5-9532-a164c6eb252d",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{$guid}}\",\n        \"userid\": \"{{userId}}\",\n        \"timestamp\": \"2019-07-15T16:43:39+12:00\",\n        \"messagetext\": \"working??\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all current notes for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6244da6-9e06-44be-817f-206b1c3a02fa",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/all/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"all",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload a piece of device data for the user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1f5a22db-6aa1-4f51-88b2-6bc42dd50fcc",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77923a75-8b23-4a32-a71f-32ab1697e692",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"deviceId\": \"Device-123\",\n    \"type\": \"smbg\",\n    \"value\": 106,\n    \"units\": \"mg/dL\",\n    \"subType\": \"linked\",\n    \"payload\": {\n      \"logIndices\": [\n        1\n      ]\n    },\n    \"uploadId\": \"upid_d5f278d59e4a\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the last piece of uploaded device data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfa14d24-9e3a-4390-9939-a033b1ec5218",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=smbg&latest=true",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "smbg"
								},
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc6366f0-2304-400f-b138-d82a23525550",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Non-specific usage of the tidepool API with the goal of giving it a quick smoke test so see that its is working as many clients would execpt it too. We are looking at\n\n - response code\n - response timing \n - headers, specificcally the x-tidepool-session and content type\n - response json data to make sure it matches our schema expectations at a high level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c141c613-da1e-4e6e-a931-3330ced427e4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clinician signup and setup",
			"item": [
				{
					"name": "Clinician sign up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a82aac15-b2f1-41d5-b0c4-8c7f1e64b929",
								"exec": [
									"var moment = require('moment');",
									"pm.variables.set(\"currentTimestamp\", moment().unix());",
									"const uuid = require('uuid');",
									"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe16a9b0-9c6b-4d1e-8d88-b0b614398241",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 1000, true, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"qa+automatedclinician{{currentTimestamp}}@tidepool.org\",\n    \"password\": \"{{signupPw}}\",\n    \"emails\": [\n        \"qa+automatedclinician{{currentTimestamp}}@tidepool.org\"\n    ],\n    \"roles\": [\n        \"clinic\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for the clinician account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "038d4922-cf17-460e-9bc9-050d7f130011",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d33a089e-bce7-4bbb-aa1d-321fc21a2507",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e8168c-0756-4dbe-956c-76f5b493200f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f1907c-40a2-47ef-8718-0d18b0156a4f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "19744f7c-7e22-422b-9be7-5b79ade75cd1",
								"exec": [
									"var moment = require('moment');\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial clinic profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01280bbc-2309-4bb6-bc28-b16073bc8d58",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b08ac00-3ef7-4152-a542-efed35392f5c",
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"clinic\":{\"role\":\"endocrinologist\",\"name\":\"{{$randomCompanyName}} Clinic\",\"telephone\":\"{{$randomPhoneNumber}}\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name, clinic name, role and telephone number."
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd85c8a3-643a-42be-89f2-4e9defb3abf3",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79376b90-7389-4557-9fc5-207688ff3896",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Clinician signs up for tidepool, and fills out profile.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b8d2cfb0-bf63-48b1-ab83-08251bf00152",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clinician new patient appt",
			"item": [
				{
					"name": "Clincian login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96e4d016-5142-4fd9-b02f-88b74acd52d5",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "532c1eb0-c346-4336-8142-9ec3d503ec85",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Create custodial user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90c7ed5c-a982-4053-89b3-ceacb0dc29f8",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"custodialUserId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user/{{userId}}/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user",
								"{{userId}}",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clinician login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fef6fd4-f652-4512-a2ed-91b91f2c5e73",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create custodial profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a304822-1d27-4454-a0bb-fc1eb2177136",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "97730d8b-f0b4-45ec-9cb2-c7fe5b9e79ef",
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"mrn\":\"{{$randomInt}}\",\"targetTimezone\":\"US/Eastern\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{custodialUserId}}",
								"profile"
							]
						},
						"description": "Setting up Name, clinic name, role and telephone number."
					},
					"response": []
				},
				{
					"name": "Upload device data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "06b05217-21f5-4255-aa8c-138b3e62c7aa",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
									"pm.variables.set(\"uploadId\", uuid.v4().replace(/-/g, '').slice(0,12));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b2e90e13-6cb6-445e-914f-1e184d2c6d86",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"normal\": 2.47,\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": 8.437136946389211\n    }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							]
						},
						"description": "uploading smbg, cbg and bolus data"
					},
					"response": []
				},
				{
					"name": "Retrieve last CBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2af9a6b-a5e6-42ec-afd9-b4c89ebf4920",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last SMBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94db4d21-c0e5-4ffc-b53c-0f56f6f48018",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload meter data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c33be36-af70-478d-b0ce-91c95dd5e83f",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Create note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd5beee7-8dd1-4195-b7f0-85d2d4a0035c",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"messageId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0a4c7426-3cde-4fd3-bcd6-001c7de28d6e",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"messageGUI\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"noteCreationTime\", now.format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Increasing nighttime basal rate\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{custodialUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd34d05a-3a8f-400b-a65e-f59df421695f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add custodial email address to custodial user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "91bfae8e-46a3-4bdd-b0a5-ca516fd53690",
								"exec": [
									"const moment = require('moment');\r",
									"pm.variables.set(\"currentTimestamp\", moment().unix());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd750c8c-17f3-4be0-97d4-dd8a5b184b08",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.variables.set(\"custodialEmail\", jsonData.emails[0]);\r",
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 500, false, pm.response.json(),\"custodialUserSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"username\":\"qa+automated{{currentTimestamp}}@tidepool.org\",\"emails\":[\"qa+automated{{currentTimestamp}}@tidepool.org\"]}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user",
								"{{custodialUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update custodial profile with email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1f55f9-08fc-4048-88fa-abb1e6aa21ff",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");\r",
									"pm.test(\"Correct Custodial Email is Returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.patient.email).to.eql(pm.variables.get(\"custodialEmail\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"patient\":{\"email\":\"{{custodialEmail}}\"},\"emails\":[\"{{custodialEmail}}\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{custodialUserId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send custodial claim account email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4155f900-a3ee-4e59-aade-ee43496ad707",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{custodialUserId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Resend custodial claim account email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2782f3c3-41b5-4e38-afbe-57318d1eea21",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/resend/signup/{{custodialEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"resend",
								"signup",
								"{{custodialEmail}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				}
			],
			"description": "Clinician adds new custodial patient, uploads data, and creates notes. Custodial patient claims account.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data storage account signup and mobile upload",
			"item": [
				{
					"name": "DSA sign-up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d7808f80-2e6d-4863-bbed-58bc063a59f2",
								"exec": [
									"const moment = require('moment');",
									"pm.variables.set(\"currentTimestamp\", moment().unix());",
									"const uuid = require('uuid');",
									"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bbaf335a-82ff-4411-b7bd-7af78055678e",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 1000, true, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"qa+automated{{currentTimestamp}}@tidepool.org\",\"password\":\"{{signupPw}}\",\"emails\":[\"qa+automated{{currentTimestamp}}@tidepool.org\"],\"roles\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6f845e6-af54-4a06-958d-313b7a8b78c6",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a33eac4-b93f-4273-a802-a94603ebff8f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17a1fc88-4abb-458b-bebf-2ded34849058",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8488b221-c686-4bdb-afca-c310809a92ab",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b3742089-fe1d-4ed6-abac-600e0964f05a",
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial DSA profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6be3368b-21a6-4448-8170-6c00e91dcdfb",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ff0babbd-b319-43fc-bccd-7d91fa72f3bf",
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name and birthdate (18 years old) for the new user."
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba9fa3eb-4062-4bbd-8023-c89a79c19c6a",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Change BG Units",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02d52156-9ce4-43e9-a060-b0df428a5cff",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userSettingsSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"bgTarget\":{\"high\":10,\"low\":3.9},\"units\":{\"bg\":\"mmol/L\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/settings",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"settings"
							]
						},
						"description": "Changing BG units to mmol/L, another aspect a user can change in the user profile."
					},
					"response": []
				},
				{
					"name": "Retrieve settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dffa95a-1b5d-4483-912f-652e17ddcc8f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userSettingsSchema\");",
									"pm.test(\"Verify settings change to mmol\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.units.bg).to.eql(\"mmol/L\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/settings",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"settings"
							]
						},
						"description": "Verifying the change to mmol/L was stored."
					},
					"response": []
				},
				{
					"name": "Tidepool data donation opt-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7bd52a3-795d-4af4-af41-eafa44a987d9",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{dataDonationEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Data donation selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "478fee08-6570-4def-9949-bc1b600fc02d",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{dataDonationOrgEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tidepool data donation opt-out",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67f0ff7e-a208-432d-9fd1-f1855771432b",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{dataDonationEmail}}"
							]
						},
						"description": "This removes the data donation option and makes sure our test accounts aren't being added to the data pool."
					},
					"response": []
				},
				{
					"name": "Remove data donation selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8c99ddb-f9c2-4ebc-bac6-be53ff0de6eb",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationOrgEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{dataDonationOrgEmail}}"
							]
						},
						"description": "This removes the data donation selection 'JDRF' and makes sure our test accounts aren't being added to the data pool."
					},
					"response": []
				},
				{
					"name": "open upload session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a885bc6-5822-4a87-a57b-ca43621b910c",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.variables.set(\"uploadSessionId\", jsonData.data.id);\r",
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(201, 500, false, null,\"uploadSessionStartSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"client\": {\r\n\t\t\t\"name\": \"org.tidepool.mobile\",\r\n\t\t\t\"version\": \"2.1.6\"\r\n\t},\r\n\t\"dataSetType\": \"continuous\",\r\n\t\"deduplicator\": {\r\n\t\t\"name\": \"org.tidepool.deduplicator.dataset.delete.origin\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}/datasets",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}",
								"datasets"
							]
						},
						"description": "Open a continuous upload session"
					},
					"response": []
				},
				{
					"name": "retrieve existing continous session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bb8411c-73c1-4787-9e62-16ca1869d406",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"uploadSessionSchema\");\r",
									"pm.test(\"Upload session retrieved is the same one we created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.variables.get(\"uploadSessionId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}/data_sets",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}",
								"data_sets"
							]
						},
						"description": "retrieve the ID of the continuous upload session created"
					},
					"response": []
				},
				{
					"name": "upload healthkit data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db55e845-ca93-4660-ac39-ff2eb68fb67c",
								"exec": [
									"const uuid = require('uuid');\r",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());\r",
									"const moment = require('moment');\r",
									"let now = moment();\r",
									"pm.variables.set(\"uploadTime\", now.format());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b17a6a4b-2770-4e03-8cf5-42a36e1ea7f8",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 500, false, null,'');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"cbg\",\r\n\t\"value\": 16.04166,\r\n\t\"units\": \"mmol/L\",\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{uploadDeviceDataItemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"41RQLJ 8332825\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n\t\t\"com.loudnate.GlucoseKit.HKMetadataKey.GlucoseIsDisplayOnly\": 0,\r\n        \"device\": {\r\n\t\t\t\"manufacturer\": \"Dexcom\",\r\n\t\t\t\"model\": \"G5 Mobile\",\r\n\t\t\t\"name\": \"CGMBLEKit\",\r\n\t\t\t\"softwareVersion\": \"20.0\",\r\n\t\t\t\"udiDeviceIdentifier\": \"00386270000002\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"basal\",\r\n    \"deliveryType\": \"temp\",\r\n    \"duration\": 300000,\r\n\t\"rate\": 6,\r\n    \"surpressed\": {\r\n        \"deliveryType\": \"scheduled\",\r\n        \"rate\": 1.4,\r\n        \"type\": \"basal\"\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{uploadDeviceDataItemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"16011cc3174513\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"HasLoopKitOrigin\": 1,\r\n\t\t\"HKInsulinDeliveryReason\": 1,\r\n        \"com.loopkit.InsulinKit.MetadataKeyScheduledBasalRate\": \"1.4 IU/hr\",\r\n        \"device\": {\r\n\t\t\t\"firmwareVersion\": \"subg_rfspy 2.2\",\r\n\t\t\t\t\"localIdentifier\": \"979142\",\r\n\t\t\t\t\"manufacturer\": \"Medtronic\",\r\n\t\t\t\t\"model\": \"754\",\r\n\t\t\t\t\"name\": \"Testing\",\r\n\t\t\t\t\"softwareVersion\": \"44.0\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},{\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"bolus\",\r\n    \"subType\": \"normal\",\r\n    \"normal\": 2,\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{uploadDeviceDataItemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"0100500050003c0035e7564513\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"HasLoopKitOrigin\": 1,\r\n\t\t\"HKInsulinDeliveryReason\": 2,\r\n        \"device\": {\r\n\t\t\t\"firmwareVersion\": \"subg_rfspy 2.2\",\r\n\t\t\t\t\"localIdentifier\": \"979142\",\r\n\t\t\t\t\"manufacturer\": \"Medtronic\",\r\n\t\t\t\t\"model\": \"754\",\r\n\t\t\t\t\"name\": \"Testing\",\r\n\t\t\t\t\"softwareVersion\": \"44.0\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},{\r\n\t\"time\": \"{{uploadTime}}\",\r\n    \"name\": \"\\ud83e\\udd67\",\r\n\t\"type\": \"food\",\r\n    \"nutrition\": {\r\n        \"carbohydrate\": {\r\n            \"net\": 30,\r\n            \"units\": \"grams\"\r\n        }\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{uploadDeviceDataItemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"35C3AE35-142B-4FF0-8B2E-784066849A50\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"com.loudnate.CarbKit.HKMetadataKey.AbsorptionTimeMinutes\": 7200,\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},\r\n{\r\n\t\"time\": \"{{uploadTime}}\",\r\n    \"name\": \"Traditional Strength Training\",\r\n\t\"type\": \"physicalActivity\",\r\n    \"duration\": {\r\n        \"units\": \"seconds\",\r\n        \"value\": 518\r\n    },\r\n    \"energy\": {\r\n        \"units\": \"kilocalories\",\r\n        \"value\": 23\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{uploadDeviceDataItemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n        \"Workout Name\": \"Quick Abs\",\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.oneothergame.7min-fitness\",\r\n\t\t\t\t\"name\": \"Workout for Women\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"3.5.0.1\"\r\n\t\t}\r\n\t}\r\n}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/dataservices/v1/datasets/{{uploadSessionId}}/data",
							"host": [
								"{{api}}"
							],
							"path": [
								"dataservices",
								"v1",
								"datasets",
								"{{uploadSessionId}}",
								"data"
							]
						},
						"description": "Upload ios healthkit data to the continous upload session opened in the previous request"
					},
					"response": []
				},
				{
					"name": "Retrieve last cbg healthkit data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7454ce6-5afb-45b9-a74e-efbeaaec6f90",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgHKSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit cgm data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus healthkit data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98b88065-ef04-4504-a31c-85a6fe8f46bb",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusHKSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last basal healthkit data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af6d5830-759b-4ce0-8e6e-a7005ec5f706",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"basalHKSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=basal",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "basal"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last food data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "822cdbbc-cc5b-4a16-b9ff-87a3be4815ef",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"foodHKSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=food",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "food"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit nutrition data."
					},
					"response": []
				},
				{
					"name": "Retrieve last physical activity data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93447188-0a7b-444f-9ea0-ed32b686a43e",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 500, false, jsonData,\"activityHKSchema\");\r",
									"pm.test(\"the returned item is the same that we uploaded\", function () {\r",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=physicalActivity",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "physicalActivity"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit activity data."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f9aae6f-922f-4df4-bf95-f3e8be42779e",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(204, 2000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\":\"{{signupPw}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "The initial interactions a user goes through to sign up for tidepool and set up their profile.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data storage account clincian appt",
			"item": [
				{
					"name": "DSA login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0549b9e9-335f-4079-86dd-1e6d62b36a50",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78aae46a-144b-400b-9d3e-b64f563ff544",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload device data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29cd87a8-9672-45a0-89e8-9902fd252873",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
									"pm.variables.set(\"uploadId\", uuid.v4().replace(/-/g, '').slice(0,12));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9fecccbc-f672-45d2-8429-c1f4aebae406",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"normal\": 2.47,\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": 8.437136946389211\n    }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						},
						"description": "uploading smbg, cbg and bolus data"
					},
					"response": []
				},
				{
					"name": "Retrieve last SMBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "328e8cb9-d8f3-4210-931a-3d385cef6a8e",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload meter data."
					},
					"response": []
				},
				{
					"name": "Retrieve last CBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70846b73-7f18-4b27-8cf4-c3c6ac16dcdf",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "019758ac-b886-456f-b609-2a3d3dd0e433",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Create note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4e470c9-bd2e-4054-9d15-7e7bb2fa5857",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"messageId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fcfdaca2-4937-4fa1-9f38-1fa554c9aa91",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"messageGUI\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"noteCreationTime\", now.format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Forgot to Bolus for Meal\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d08d3e95-a8e3-4c89-9819-e9f8bdcb311b",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite clinician to see data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a519dbfc-d2e7-4e84-8ec9-2f2e8bbb1c32",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"inviteKey\", jsonData.key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"qa+clinician@tidepool.org\",\n  \"permissions\": {\n    \"view\": {},\n    \"note\":{},\n    \"upload\":{}\n  }\n}"
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "399bf5d1-d010-45da-90ad-240ba9c156eb",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clincian login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ade73762-ab1a-4ce9-a8a6-396f1a608edb",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"clinicUserId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f98df8eb-f768-4de1-9982-ba912adc314d",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"key\":\"{{inviteKey}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/accept/invite/{{clinicUserId}}/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"invite",
								"{{clinicUserId}}",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user profile (clinic)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc931f03-4848-4d05-ab84-d9f339608733",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve last SMBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "673f86b3-dd37-4a11-8a29-59685ee749c9",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload meter data."
					},
					"response": []
				},
				{
					"name": "Retrieve last CBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec1d793b-25b8-4eec-bcea-81575294e58f",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9da31609-04b2-47bb-b029-8670d96b2f2c",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7e3ad33-08dd-45e0-843f-acd959880da8",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment on note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa7f62dd-1157-4d16-b9f0-ee0fa8a3eec5",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e92b056-5188-407e-8dbc-90e2af84ef34",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"messageGUI\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"noteCreationTime\", now.format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"parentmessage\": \"{{messageId}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\": \"{{clinicUserId}}\",\n        \"messagetext\": \"Clinician comment\",\n        \"timestamp\": \"{{noteCreationTime}}\",\n        \"guid\": \"{{messageGUI}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/reply/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"reply",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0052da8b-66e2-483e-a9c2-327f8494336f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "DSA login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3e9af02-b426-4911-b55c-60b88bdc4b46",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							],
							"query": [
								{
									"key": "x-tidepool-session-token",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove clinician from share",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41ef1cb1-4979-4715-acca-95ef34bc197a",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/access/{{userId}}/{{clinicUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"access",
								"{{userId}}",
								"{{clinicUserId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset clinician invitation status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37041a96-ba91-45bd-b029-a24739f903f3",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"key\":\"{{inviteKey}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{clinicEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{clinicEmail}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "DSA that uploads data to their Tidepool Account, adds notes and shares data with their clinician in preparation for a clinic appointment.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Status Checks",
			"item": [
				{
					"name": "auth status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64fd7c8e-255c-4a88-ba4d-320d5fc0266a",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "confirm status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd247acf-248c-43a0-ae86-0fc247d6dad3",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/confirm/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "data status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5a08ba9-3099-4f5a-9fea-d0a23ced694d",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/data/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "dataservices status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cd3c5ce-f876-4cb1-bc21-ec5947057a5e",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/dataservices/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"dataservices",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "export status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ce0ef58-5135-4733-b426-32896d900202",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/export/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"export",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "metrics status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a3d1a2d-c087-4eb7-9f82-69e63084253a",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/metrics/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"metrics",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "userservices status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c888ebc3-84ff-4548-9cbb-8db7ddaa2707",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/userservices/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"userservices",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cb9ab68b-4d0b-488a-8c16-c3a7d0ec80f2",
				"type": "text/javascript",
				"exec": [
					"const userSchema = { \"required\": [\"userid\", \"username\", \"emails\", \"emailVerified\", \"termsAccepted\"], \"properties\": { \"emailVerified\": { \"type\": \"boolean\" }, \"emails\": { \"type\": \"array\" }, \"userid\": { \"type\": \"string\" }, \"username\": { \"type\": \"string\" }, \"termsAccepted\": { \"type\": \"string\" } } };",
					"const custodialUserSchema = { \"required\": [\"userid\", \"username\", \"emails\", \"emailVerified\"], \"properties\": { \"emailVerified\": { \"type\": \"boolean\" }, \"emails\": { \"type\": \"array\" }, \"userid\": { \"type\": \"string\" }, \"username\": { \"type\": \"string\" } } };",
					"const messageAddedSchema = { \"required\": [\"id\"], \"properties\": { \"id\": { \"type\": \"string\" } } };",
					"const messagesSchema = { \"type\": \"object\", \"required\":[\"messages\"], \"properties\":{\"messages\": {\"type\": \"array\", \"items\": { \"required\": [\"id\", \"guid\", \"parentmessage\", \"userid\", \"groupid\", \"timestamp\", \"createdtime\", \"messagetext\", \"user\"], \"properties\": { \"id\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"userid\": { \"type\": \"string\" }, \"groupid\": { \"type\": \"string\" }, \"timestamp\": { \"type\": \"string\" }, \"createdtime\": { \"type\": \"string\" }, \"messagetext\": { \"type\": \"string\" }, \"user\": { \"type\": \"object\" } } } }}};",
					"const smbgsSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const cbgSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const cbgHKSchema = {\"type\": \"array\",\"items\": {\"anyOf\": [{\"type\": \"object\",\"required\": [\"deviceId\",\"id\",\"origin\",\"payload\",\"time\",\"type\",\"units\",\"uploadId\",\"value\"], \"properties\": {\"deviceId\": {\"type\": \"string\"}, \"id\": {\"type\": \"string\"}, \"origin\": {\"type\": \"object\", \"required\": [\"id\",\"name\",\"type\"], \"properties\": {\"id\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"type\": {\"type\": \"string\"}}}, \"payload\": {\"type\":\"object\", \"required\":[\"HKMetadataKeySyncIdentifier\", \"device\",\"sourceRevision\"], \"properties\":{\"HKMetadataKeySyncIdentifier\": {\"type\": \"string\"}, \"device\":{\"type\": \"object\", \"required\": [\"manufacturer\", \"model\"], \"properties\": {\"manufacturer\": {\"type\": \"string\"}, \"model\":{\"type\":\"string\"}}}, \"sourceRevision\":{\"type\": \"object\"}, \"properties\":{\"source\":{\"type\":\"string\"}}}}, \"time\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}, \"units\":{\"type\":\"string\"}, \"uploadId\":{\"type\": \"string\"}, \"value\": {\"type\":\"number\"}}}]}}",
					"const bolusSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"uploadId\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"normal\": {\"type\": \"number\"}, \"extended\":{\"type\": \"integer\"}, \"expectedExtended\":{\"type\": \"integer\"}, \"duration\":{\"type\": \"integer\"}, \"expectedDuration\":{\"type\": \"integer\"}, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" } } } }",
					"const bolusHKSchema = {\"type\": \"array\",\"items\": {\"anyOf\": [{\"type\": \"object\",\"required\": [\"deviceId\",\"id\", \"normal\",\"origin\",\"payload\",\"subType\", \"time\",\"type\",\"uploadId\"], \"properties\": {\"deviceId\": {\"type\": \"string\"}, \"id\": {\"type\": \"string\"}, \"normal\":{\"type\":\"number\"}, \"origin\": {\"type\": \"object\", \"required\": [\"id\",\"name\",\"type\"], \"properties\": {\"id\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"type\": {\"type\": \"string\"}}}, \"payload\": {\"type\":\"object\", \"required\":[\"HKInsulinDeliveryReason\",\"HKMetadataKeySyncIdentifier\", \"device\",\"sourceRevision\"], \"properties\":{\"HKInsulinDeliveryReason\":{\"type\": \"integer\"}, \"HKMetadataKeySyncIdentifier\": {\"type\": \"string\"}, \"device\":{\"type\": \"object\", \"required\": [\"manufacturer\", \"model\"], \"properties\": {\"manufacturer\": {\"type\": \"string\"}, \"model\":{\"type\":\"string\"}}}, \"sourceRevision\":{\"type\": \"object\"}, \"properties\":{\"source\":{\"type\":\"string\"}}}}, \"subType\":{\"type\":\"string\"}, \"time\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}, \"uploadId\":{\"type\": \"string\"}}}]}}",
					"const basalHKSchema = {\"type\": \"array\",\"items\": {\"anyOf\": [{\"type\": \"object\",\"required\": [\"deviceId\",\"id\",\"origin\",\"payload\", \"rate\", \"time\",\"type\",\"uploadId\"], \"properties\": {\"deviceId\": {\"type\": \"string\"}, \"id\": {\"type\": \"string\"}, \"origin\": {\"type\": \"object\", \"required\": [\"id\",\"name\",\"type\"], \"properties\": {\"id\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"type\": {\"type\": \"string\"}}}, \"payload\": {\"type\":\"object\", \"required\":[\"HKInsulinDeliveryReason\",\"HKMetadataKeySyncIdentifier\", \"device\",\"sourceRevision\"], \"properties\":{\"HKInsulinDeliveryReason\":{\"type\": \"integer\"}, \"HKMetadataKeySyncIdentifier\": {\"type\": \"string\"}, \"device\":{\"type\": \"object\", \"required\": [\"manufacturer\", \"model\"], \"properties\": {\"manufacturer\": {\"type\": \"string\"}, \"model\":{\"type\":\"string\"}}}, \"sourceRevision\":{\"type\": \"object\"}, \"properties\":{\"source\":{\"type\":\"string\"}}}}, \"rate\":{\"type\":\"number\"}, \"time\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}, \"uploadId\":{\"type\": \"string\"}}}]}}",
					"const foodHKSchema = {\"type\": \"array\",\"items\": {\"anyOf\": [{\"type\": \"object\",\"required\": [\"id\",\"name\", \"nutrition\",\"origin\",\"payload\", \"time\",\"type\",\"uploadId\"], \"properties\": {\"id\": {\"type\": \"string\"}, \"name\":{\"type\":\"string\"},\"nutrition\":{\"type\":\"object\", \"required\":[\"carbohydrate\"], \"properties\":{\"carbohydrate\":{\"type\":\"object\", \"required\":[\"net\", \"units\"], \"properties\":{\"net\":{\"type\":\"number\"}, \"units\":{\"type\":\"string\"}}}}}, \"origin\": {\"type\": \"object\", \"required\": [\"id\",\"name\",\"type\"], \"properties\": {\"id\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"type\": {\"type\": \"string\"}}}, \"payload\": {\"type\":\"object\", \"required\":[\"HKMetadataKeySyncIdentifier\", \"sourceRevision\"], \"properties\":{\"HKMetadataKeySyncIdentifier\": {\"type\": \"string\"},\"sourceRevision\":{\"type\": \"object\"}, \"properties\":{\"source\":{\"type\":\"string\"}}}}, \"time\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}, \"uploadId\":{\"type\": \"string\"}}}]}}",
					"const activityHKSchema = {\"type\": \"array\",\"items\": {\"anyOf\": [{\"type\": \"object\",\"required\": [\"duration\", \"energy\",\"id\",\"name\", \"origin\",\"payload\", \"time\",\"type\",\"uploadId\"], \"properties\": {\"duration\":{\"type\":\"object\", \"required\":[\"units\", \"value\"], \"properties\":{\"units\":{\"type\":\"string\"}, \"value\":{\"type\":\"number\"}}},\"energy\":{\"type\":\"object\", \"required\":[\"units\", \"value\"], \"properties\":{\"units\":{\"type\":\"string\"}, \"value\":{\"type\":\"number\"}}}, \"id\": {\"type\": \"string\"}, \"name\":{\"type\":\"string\"}, \"origin\": {\"type\": \"object\", \"required\": [\"id\",\"name\",\"type\"], \"properties\": {\"id\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"type\": {\"type\": \"string\"}}}, \"payload\": {\"type\":\"object\", \"required\":[\"sourceRevision\"], \"properties\":{\"sourceRevision\":{\"type\": \"object\"}, \"properties\":{\"source\":{\"type\":\"object\", \"required\":[\"name\"], \"properties\":{\"name\":{\"type\":\"string\"}}}}}}, \"time\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}, \"uploadId\":{\"type\": \"string\"}}}]}}",
					"const userProfileSchema = {\"required\": [\"fullName\"], \"properties\": { \"fullName\": { \"type\": \"string\" },",
					"\"patient\": { \"type\": \"object\" }, \"clinic\": {\"type\": \"object\"}}};",
					"const careteamInviteSchema = { \"required\": [\"key\", \"type\", \"email\", \"creatorId\", \"creator\", \"context\", \"created\"], \"properties\": { \"key\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"email\": { \"type\": \"string\" }, \"creatorId\": { \"type\": \"string\" }, \"creator\": { \"type\": \"object\" }, \"context\": { \"type\": \"object\" }, \"created\": { \"type\": \"string\" } } };",
					"const userSettingsSchema = { \"required\": [\"bgTarget\", \"units\"], \"properties\": { \"bgTarget\": { \"type\": \"object\" }, \"units\": { \"type\": \"object\" } } };",
					"const uploadSessionStartSchema = { \"type\": \"object\", \"required\": [\"data\", \"meta\"], \"properties\": {\"data\": {\"type\": \"object\"}, \"required\": [\"createdTime\", \"deduplicator\", \"id\", \"modifiedTime\", \"type\", \"uploadId\", \"client\", \"dataSetType\"], \"properties\": {\"createdTime\": {\"type\":\"string\"}, \"deduplicator\": {\"type\": \"object\", \"required\":[\"name\", \"version\"], \"properties\": {\"name\":{\"type\": \"string\"}, \"version\":{\"type\": \"string\"}}}, \"id\": {\"type\":\"string\"}, \"modifiedTime\": {\"type\": \"string\"}, \"type\": {\"type\": \"string\"}, \"uploadId\": {\"type\": \"string\"},\"client\": {\"type\": \"object\", \"required\": [\"name\", \"version\"], \"properties\": {\"name\": { \"type\": \"string\"}, \"version\": {\"type\": \"string\"}}}, \"dataSetType\": {\"type\": \"string\"}}, \"meta\": {\"type\": \"object\"}, \"required\": [\"trace\"], \"properties\": {\"trace\":{\"type\": \"object\"}, \"required\": [\"request\"], \"properties\": {\"type\": \"string\"}}}}",
					"const uploadSessionSchema = {\"type\": \"array\", \"items\": { \"anyOf\": [{\"type\": \"object\",\"default\": {}, \"required\": [\"client\",\"createdTime\",\"dataSetType\",\"deduplicator\",\"id\",\"modifiedTime\",\"type\", \"uploadId\"],\"properties\": {\"client\": {\"type\": \"object\",\"required\": [\"name\",\"version\"],\"properties\": {\"name\": {\"type\": \"string\"},\"version\": {\"type\": \"string\"}}},\"createdTime\": {\"type\": \"string\"}, \"dataSetType\": {\"type\": \"string\"},\"deduplicator\": {\"type\": \"object\",\"required\": [\"name\",\"version\"],\"properties\": { \"name\": {\"type\": \"string\"},\"version\": {\"type\": \"string\"}}},\"id\": {\"type\": \"string\"},\"modifiedTime\": {\"type\": \"string\"},\"type\": {\"type\": \"string\"},\"uploadId\": {\"type\": \"string\"}}}]}}",
					"",
					"pm.globals.set(\"userSchema\", JSON.stringify(userSchema));",
					"pm.globals.set(\"custodialUserSchema\", JSON.stringify(custodialUserSchema));",
					"pm.globals.set(\"userProfileSchema\", JSON.stringify(userProfileSchema));",
					"pm.globals.set(\"messageAddedSchema\", JSON.stringify(messageAddedSchema));",
					"pm.globals.set(\"messagesSchema\", JSON.stringify(messagesSchema));",
					"pm.globals.set(\"smbgsSchema\", JSON.stringify(smbgsSchema));",
					"pm.globals.set(\"cbgHKSchema\", JSON.stringify(cbgHKSchema));",
					"pm.globals.set(\"cbgSchema\", JSON.stringify(cbgSchema));",
					"pm.globals.set(\"bolusSchema\", JSON.stringify(bolusSchema));",
					"pm.globals.set(\"bolusHKSchema\", JSON.stringify(bolusHKSchema));",
					"pm.globals.set(\"basalHKSchema\", JSON.stringify(basalHKSchema));",
					"pm.globals.set(\"foodHKSchema\", JSON.stringify(foodHKSchema));",
					"pm.globals.set(\"activityHKSchema\", JSON.stringify(activityHKSchema));",
					"pm.globals.set(\"careteamInviteSchema\", JSON.stringify(careteamInviteSchema));",
					"pm.globals.set(\"userSettingsSchema\", JSON.stringify(userSettingsSchema));",
					"pm.globals.set(\"uploadSessionStartSchema\", JSON.stringify(uploadSessionStartSchema));",
					"pm.globals.set(\"uploadSessionSchema\", JSON.stringify(uploadSessionSchema));",
					"",
					"pm.globals.set('loadAsserts', function loadAsserts() {",
					"    let asserts = {};",
					"    asserts.responseTimeMsLessThan = function responseTimeMsLessThan(ms) {",
					"        pm.test(\"Response time is less than \"+ms+\"ms\", function () {",
					"            //pm.expect(pm.response.responseTime).to.be.below(ms);",
					"            console.log(\"Expected response in ms under \",ms);",
					"            console.log(\"Actual response time in ms \",pm.response.responseTime);",
					"        });",
					"    };",
					"    asserts.responseTypeJson = function responseTypeJson() {",
					"        pm.test(\"Response type is application/json\", function () {",
					"            pm.expect(pm.response.headers.get(\"content-type\")).to.equal('application/json');",
					"        });",
					"    };",
					"    asserts.responseHasSessionToken = function responseHasSessionToken() {",
					"        pm.test(\"Response has x-tidepool-session-token\", function () {",
					"            pm.response.to.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseHasNoSessionToken = function responseHasNoSessionToken(){",
					"         pm.test(\"Response has NO x-tidepool-session-token\", function () {",
					"            pm.response.to.not.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseBodyMatchesSchema = function responseBodyMatchesSchema(jsonData,schemaName) {",
					"         pm.test(\"Response body matches \"+schemaName, function () {",
					"            let schema = JSON.parse(pm.globals.get(schemaName));",
					"            pm.response.to.have.jsonSchema(schema);",
					"         });",
					"    };",
					"    asserts.responseStatusCodeIs = function responseStatusCodeIs(code){",
					"        pm.test(\"Response status is \"+code, function () {",
					"            pm.response.to.have.status(code);",
					"        });",
					"    };",
					"    asserts.common = function common(expectedCode, durationMs, hasSessionToken, jsonData, schemaName){",
					"            asserts.responseStatusCodeIs(expectedCode);",
					"            asserts.responseTimeMsLessThan(durationMs);",
					"            if(hasSessionToken){",
					"                assert.responseHasSessionToken();",
					"            }else{",
					"                assert.responseHasNoSessionToken();",
					"            }",
					"            if (jsonData!==null){",
					"                assert.responseTypeJson();",
					"                assert.responseBodyMatchesSchema(jsonData,schemaName);",
					"            }",
					"    };",
					"    return asserts;",
					"} + '; loadAsserts();');"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}