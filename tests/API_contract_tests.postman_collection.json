{
	"info": {
		"_postman_id": "790b1449-4c67-4899-8d3b-522adb886fc8",
		"name": "API_tests",
		"description": "Contract tests using the tidepool API with the goal of testing the interaction between the Tidepool APis to see that its is working as a client expects. We are looking at\r\n\r\n - response code\r\n - response timing \r\n - headers, specifically the x-tidepool-session and content type\r\n - response json data to make sure it matches our schema expectations at a high level",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26957155"
	},
	"item": [
		{
			"name": "Contract Tests",
			"item": [
				{
					"name": "Create New Clinic with New Tidepool User",
					"item": [
						{
							"name": "create new account - clinician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.commonTests(\"usersSchema\")",
											"pm.collectionVariables.set(\"userId\", pm.response.json().userid);",
											"pm.collectionVariables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.collectionVariables.set('signupPw', uuid.v4().slice(0,9));",
											"let newClinicianEmailAddress = \"automated-tests+clinician_datetag_@tidepool.org\";",
											"pm.environment.set('newClinicianEmailAddress', newClinicianEmailAddress.replace('_datetag_', pm.environment.get(\"skipEmailKey\") + Date.now() + uuid.v4().slice(0,5)));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{newClinicianEmailAddress}}\",\n    \"password\": \"{{signupPw}}\",\n    \"emails\": [\n        \"{{newClinicianEmailAddress}}\"\n    ],\n    \"roles\": [\n        \"clinician\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for the clinician account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "get current user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"utils.commonTests(\"usersSchema\")",
											"pm.test(\"User email is verified\", function () {",
											"    pm.expect(jsonData.emailVerified).to.be.true;",
											"    pm.expect()",
											"});",
											"pm.test(\"User email is correct\", function () {",
											"    pm.expect(jsonData.emails).to.be.an('array').that.has.lengthOf(1);",
											"    pm.expect(jsonData.emails[0]).to.equal(pm.environment.get(\"newClinicianEmailAddress\").toLowerCase())",
											"});",
											"pm.test(\"User role is correct\", function () {",
											"    pm.expect(jsonData.roles).to.be.an('array').that.includes.members([pm.environment.get(\"defaultRole\"), \"clinician\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "list data sources for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"utils.commonTests()",
											"pm.test(\"Response is an empty array\", function () {",
											"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}/data_sources",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}",
										"data_sources"
									]
								}
							},
							"response": []
						},
						{
							"name": "list clinics for clinician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"utils.commonTests()",
											"pm.test(\"Response is an empty array\", function () {",
											"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinicians/{{userId}}/clinics?limit=1000&offset=0",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinicians",
										"{{userId}}",
										"clinics"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list invites for clinician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"utils.testResponse(\"GET\", [404])",
											"utils.responseTypeJson()",
											"utils.responseHasNoSessionToken()",
											"utils.responseTime()",
											"pm.test(\"User email is correct\", function () {",
											"    pm.expect(jsonData.reason).to.equal(\"Nothing found\")",
											"    pm.expect(jsonData.code).to.equal(404)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinicians/{{userId}}/invites",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinicians",
										"{{userId}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "list users with trustee or trustor access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"utils.commonTests()",
											"pm.test(\"Response is an empty array\", function () {",
											"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/users/{{userId}}/users",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"users",
										"{{userId}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "update current user account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"utils.commonTests(\"usersSchema\")",
											"pm.test(\"User email is verified\", function () {",
											"    pm.expect(jsonData.emailVerified).to.be.true;",
											"    pm.expect()",
											"});",
											"pm.test(\"User email is correct\", function () {",
											"    pm.expect(jsonData.emails).to.be.an('array').that.has.lengthOf(1);",
											"    pm.expect(jsonData.emails[0]).to.equal(pm.environment.get(\"newClinicianEmailAddress\").toLowerCase())",
											"});",
											"pm.test(\"User role is correct\", function () {",
											"    pm.expect(jsonData.roles).to.be.an('array').that.includes.members([pm.environment.get(\"defaultRole\"), \"clinician\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\": {}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "update user metadata - profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"fullName\":\"Ginny API Testing\",\"clinic\":{\"role\":\"clinic_manager\",\"npi\":\"1230000548\"}}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"clinic\":{\"role\":\"clinic_manager\",\"npi\":\"1230000548\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "update user metadata - preferences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response just a 200 no body"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/preferences",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"preferences"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "create clinic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response 200  {\"address\":\"5262 forever testing dr\",\"canMigrate\":false,\"city\":\"testcity\",\"clinicSize\":\"500-999\",\"clinicType\":\"healthcare_system\",\"country\":\"US\",\"createdTime\":\"2023-03-28T21:10:43.87Z\",\"id\":\"642357d33eda1ccfd09602a3\",\"name\":\"api test sample clinic creation catching responses\",\"phoneNumbers\":[{\"number\":\"(512) 223-2356\",\"type\":\"Office\"}],\"postalCode\":\"56023\",\"preferredBgUnits\":\"mg/dL\",\"shareCode\":\"W6GV-FZR6-L5WR\",\"state\":\"IL\",\"tier\":\"tier0100\",\"tierDescription\":\"Free\",\"updatedTime\":\"2023-03-28T21:10:43.87Z\",\"website\":\"https://www.reallycoolwebsite.com\"}",
											"let jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"clinicId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{$randomWords}} Clinic\",\"address\":\"{{$randomStreetAddress}}\",\"city\":\"{{$randomCity}}\",\"state\":\"California\",\"postalCode\":\"43074\",\"country\":\"US\",\"phoneNumbers\":[{\"type\":\"Office\",\"number\":\"{{$randomPhoneNumber}}\"}],\"clinicType\":\"healthcare_system\",\"clinicSize\":\"500-999\",\"preferredBgUnits\":\"mg/dL\",\"website\":\"https://www.{{$randomWord}}.com\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/clinics",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinics"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "list clinics for clinician Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//200 [{\"clinic\":{\"address\":\"5262 forever testing dr\",\"canMigrate\":false,\"city\":\"testcity\",\"clinicSize\":\"500-999\",\"clinicType\":\"healthcare_system\",\"country\":\"US\",\"createdTime\":\"2023-03-28T21:10:43.87Z\",\"id\":\"642357d33eda1ccfd09602a3\",\"name\":\"api test sample clinic creation catching responses\",\"phoneNumbers\":[{\"number\":\"(512) 223-2356\",\"type\":\"Office\"}],\"postalCode\":\"56023\",\"preferredBgUnits\":\"mg/dL\",\"shareCode\":\"W6GV-FZR6-L5WR\",\"state\":\"IL\",\"tier\":\"tier0100\",\"tierDescription\":\"Free\",\"updatedTime\":\"2023-03-28T21:10:43.87Z\",\"website\":\"https://www.reallycoolwebsite.com\"},\"clinician\":{\"createdTime\":\"2023-03-28T21:10:43.876Z\",\"email\":\"ginny+apitestswithburp@tidepool.org\",\"id\":\"316397f9-2c4a-41cb-abaa-d90c151c168b\",\"name\":\"Ginny API Testing\",\"roles\":[\"CLINIC_ADMIN\"],\"updatedTime\":\"2023-03-28T21:10:43.876Z\"}}]"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinicians/{{userId}}/clinics?limit=1000&offset=0",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinicians",
										"{{userId}}",
										"clinics"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get clinic patient invites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//empty array as we've just created clinic"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinics/{{clinicId}}/invites/patients",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinics",
										"{{clinicId}}",
										"invites",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "get clinic patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// {\"data\":[{\"birthDate\":\"1984-08-24\",\"createdTime\":\"2023-03-28T21:10:43.882Z\",\"dataSources\":null,\"email\":\"demo+james@tidepool.org\",\"fullName\":\"James Jellyfish\",\"id\":\"d02b85e6b3\",\"permissions\":{\"view\":{}},\"tags\":null,\"targetDevices\":[\"tandem\"],\"updatedTime\":\"2023-03-28T21:10:43.882Z\"}],\"meta\":{\"count\":1}} 200"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinics/{{clinicId}}/patients?offset=0&limit=50",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinics",
										"{{clinicId}}",
										"patients"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "sort",
											"value": "%2Bname",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "Clinician signs up for tidepool, and fills out profile.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Data owner and clinician user interaction",
					"item": [
						{
							"name": "DSA login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"userId\", jsonData.userid);",
											"pm.collectionVariables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{loginPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{loginEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload device data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", moment().format('YYYY-MM-DDThh:mm:ss'));\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());\r",
											"pm.collectionVariables.set(\"uploadId\", pm.variables.replaceIn('{{$guid}}').replace(/-/g, '').slice(0,12));\r",
											"pm.variables.set(\"itemId\", pm.variables.replaceIn('{{$randomUUID}}').replace(/-/g, ''));\r",
											"pm.variables.set(\"guid\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.variables.set(\"smbgValue\", 11.331314156239124);\r",
											"pm.variables.set(\"bolusValue\", 2.47);\r",
											"pm.collectionVariables.set(\"cbgValue\", 8.437136946389211);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentTimestamp}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentTimestamp}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentTimestamp}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						},
						{
							"name": "Retrieve all cbg data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"CBG data just uploaded is returned\", function () {",
											"    let uploadId = pm.collectionVariables.get(\"uploadId\");",
											"    let cbgValue = pm.collectionVariables.get(\"cbgValue\");",
											"    let testPassed = false;",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"cbg\") {",
											"            pm.expect(jsonData[i].value).to.eql(cbgValue);",
											"            return testPassed = true;",
											"            }",
											"        }",
											"         if (!testPassed) {",
											"        pm.expect.fail(\"Data uploaded was not returned\")",
											"         }",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve all smbg data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve all bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Create note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"messageId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.collectionVariables.set(\"messageGUI\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.collectionVariables.set(\"noteCreationTime\", now.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}\",\n        \"messagetext\": \"Forgot to Bolus for Meal\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/send/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"send",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"let jsonData = pm.response.json();",
											"pm.expect(jsonData.messages[0].guid).to.eql(pm.collectionVariables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invite clinician to see data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"inviteKey\", jsonData.key);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{clinicianEmail}}\",\n  \"permissions\": {\n    \"view\": {},\n    \"note\":{},\n    \"upload\":{}\n  }\n}"
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clincian login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"clinicianUserId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clinicianPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clinicianEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm invitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"key\":\"{{inviteKey}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/accept/invite/{{clinicianUserId}}/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"accept",
										"invite",
										"{{clinicianUserId}}",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the clinician account information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve patient profile as clinician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"profileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve all cbg data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"",
											"pm.test(\"Schema is valid for data types returned\", function () {",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
											"",
											"    }",
											"});",
											"",
											"pm.test(\"CBG data just uploaded is returned\", function () {",
											"    let uploadId = pm.variables.get(\"uploadId\");",
											"    let cbgValue = pm.variables.get(\"cbgValue\");",
											"    let testPassed = false;",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"cbg\") {",
											"            pm.expect(jsonData[i].value).to.eql(cbgValue);",
											"            return testPassed = true;",
											"            }",
											"        }",
											"         if (!testPassed) {",
											"        pm.expect.fail(\"Data uploaded was not returned\")",
											"         }",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve all smbg data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"",
											"pm.test(\"Schema is valid for data types returned\", function () {",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
											"",
											"    }",
											"});",
											"",
											"pm.test(\"SMBG data just uploaded is returned\", function () {",
											"    let uploadId = pm.variables.get(\"uploadId\");",
											"    let smbgValue = pm.variables.get(\"smbgValue\");",
											"    let testPassed = false;",
											"    console.log(uploadId)",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"smbg\") {",
											"            pm.expect(jsonData[i].value).to.eql(smbgValue);",
											"            return testPassed = true;",
											"            }",
											"        } ",
											"        if (!testPassed) {",
											"        pm.expect.fail(\"Data uploaded was not returned\")",
											"         }",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve all bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"",
											"pm.test(\"Schema is valid for data types returned\", function () {",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
											"",
											"    }",
											"});",
											"",
											"pm.test(\"Bolus data just uploaded is returned\", function () {",
											"    let uploadId = pm.variables.get(\"uploadId\");",
											"    let bolusValue = pm.variables.get(\"bolusValue\");",
											"    let testPassed = false;",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"bolus\") {",
											"            pm.expect(jsonData[i].normal).to.eql(bolusValue);",
											"            return testPassed = true;",
											"            }",
											"        }",
											"         if (!testPassed) {",
											"        pm.expect.fail(\"Data uploaded was not returned\")",
											"         }",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json().messages,\"getMessageSchema\");",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"let jsonData = pm.response.json();",
											"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment on note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, pm.response.json(),\"addMessageSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"messageGUI\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"noteCreationTime\", now.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"parentmessage\": \"{{messageId}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\": \"{{clinicianUserId}}\",\n        \"messagetext\": \"Clinician comment\",\n        \"timestamp\": \"{{noteCreationTime}}\",\n        \"guid\": \"{{messageGUI}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/reply/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"reply",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "DSA login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{loginPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{loginEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									],
									"query": [
										{
											"key": "x-tidepool-session-token",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove clinician from share",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/access/{{userId}}/{{clinicianUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"access",
										"{{userId}}",
										"{{clinicianUserId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset clinician invitation status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"key\":\"{{inviteKey}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/{{userId}}/invited/{{clinicianEmail}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"{{userId}}",
										"invited",
										"{{clinicianEmail}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "DSA that uploads data to their Tidepool Account, adds notes and shares data with their clinician in preparation for a clinician appointment."
				},
				{
					"name": "Clinic and custodial user interaction",
					"item": [
						{
							"name": "Clincian login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clinicianPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clinicianEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the clinician account information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Clinics for Clinician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null);",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"clinicId\", jsonData[0].clinic.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinicians/{{userId}}/clinics?limit=1000&offset=0",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinicians",
										"{{userId}}",
										"clinics"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custodial User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"custodialBirthdate\", jsonData.birthDate);",
											"pm.variables.set(\"custodialUserId\", jsonData.id);",
											"pm.variables.set(\"createdTime\", jsonData.createdTime);",
											"pm.variables.set(\"fullName\", jsonData.fullName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"const uuid = require('uuid');\r",
											"\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));\r",
											"let newCustodialEmailAddress = \"automated-tests+custodial_datetag_@tidepool.org\";\r",
											"pm.variables.set('newCustodialEmailAddress', newCustodialEmailAddress.replace('_datetag_', \"f7CgVkBHn6yyyB8mZNea9NixoPNZNQQc\" + Date.now() + uuid.v4().slice(0,5)));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"birthDate\":\"{{birthdate}}\",\"fullName\":\"{{$randomFullName}}\",\"mrn\":\"{{$randomInt}}\",\"tags\":[],\"connectDexcom\":false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/clinics/{{clinicId}}/patients",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinics",
										"{{clinicId}}",
										"patients"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "Get users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get clinic profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get lots of users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/users/{{userId}}/users",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"users",
										"{{userId}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve clinic connections Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null);",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"clinicId\", jsonData[0].clinic.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinicians/{{userId}}/clinics?limit=1000&offset=0",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinicians",
										"{{userId}}",
										"clinics"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get patients",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinics/{{clinicId}}/patients",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinics",
										"{{clinicId}}",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get patient profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{custodialUserId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload device data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", moment().format('YYYY-MM-DDThh:mm:ss'));\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());\r",
											"pm.variables.set(\"uploadId\", pm.variables.replaceIn('{{$guid}}').replace(/-/g, '').slice(0,12));\r",
											"pm.variables.set(\"itemId\", pm.variables.replaceIn('{{$randomUUID}}').replace(/-/g, ''));\r",
											"pm.variables.set(\"guid\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.variables.set(\"smbgValue\", 11.331314156239124);\r",
											"pm.variables.set(\"bolusValue\", 2.47);\r",
											"pm.variables.set(\"cbgValue\", 8.437136946389211);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentTimestamp}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentTimestamp}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentTimestamp}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						},
						{
							"name": "Retrieve all cbg data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"",
											"pm.test(\"Schema is valid for data types returned\", function () {",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
											"",
											"    }",
											"});",
											"",
											"pm.test(\"CBG data just uploaded is returned\", function () {",
											"    let uploadId = pm.variables.get(\"uploadId\");",
											"    let cbgValue = pm.variables.get(\"cbgValue\");",
											"    let testPassed = false;",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"cbg\") {",
											"            pm.expect(jsonData[i].value).to.eql(cbgValue);",
											"            return testPassed = true;",
											"            }",
											"        }",
											"         if (!testPassed) {",
											"        pm.expect.fail(\"Data uploaded was not returned\")",
											"         }",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve all smbg data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"",
											"pm.test(\"Schema is valid for data types returned\", function () {",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
											"",
											"    }",
											"});",
											"",
											"pm.test(\"SMBG data just uploaded is returned\", function () {",
											"    let uploadId = pm.variables.get(\"uploadId\");",
											"    let smbgValue = pm.variables.get(\"smbgValue\");",
											"    let testPassed = false;",
											"    console.log(uploadId)",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"smbg\") {",
											"            pm.expect(jsonData[i].value).to.eql(smbgValue);",
											"            return testPassed = true;",
											"            }",
											"        } ",
											"        if (!testPassed) {",
											"        pm.expect.fail(\"Data uploaded was not returned\")",
											"         }",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve all bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"",
											"pm.test(\"Schema is valid for data types returned\", function () {",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
											"",
											"    }",
											"});",
											"",
											"pm.test(\"Bolus data just uploaded is returned\", function () {",
											"    let uploadId = pm.variables.get(\"uploadId\");",
											"    let bolusValue = pm.variables.get(\"bolusValue\");",
											"    let testPassed = false;",
											"    for(let i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"bolus\") {",
											"            pm.expect(jsonData[i].normal).to.eql(bolusValue);",
											"            return testPassed = true;",
											"            }",
											"        }",
											"         if (!testPassed) {",
											"        pm.expect.fail(\"Data uploaded was not returned\")",
											"         }",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Create note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, pm.response.json(),\"addMessageSchema\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"messageId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"pm.variables.set(\"currentTimestamp\", moment().format());",
											"pm.variables.set(\"messageGUI\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{currentTimestamp}}\",\n        \"messagetext\": \"Increasing nighttime basal rate\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/send/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"send",
										"{{custodialUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json().messages,\"getMessageSchema\");",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"let jsonData = pm.response.json();",
											"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add email to profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"var moment = require('moment');",
											"",
											"let newMoment = moment();",
											"pm.variables.set(\"currentDateTime\", newMoment.format('YYYY-MM-DDThh:mm:ss')+\"Z\");",
											"",
											"let newCustodialEmailAddress = \"automated-tests+custodial_datetag_@tidepool.org\";",
											"pm.variables.set('newCustodialEmailAddress', newCustodialEmailAddress.replace('_datetag_', \"f7CgVkBHn6yyyB8mZNea9NixoPNZNQQc\" + Date.now() + uuid.v4().slice(0,5)));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"birthDate\":\"{{custodialBirthdate}}\",\"fullName\":\"{{fullName}}\", \"createdTime\": \"{{createdTime}}\",\"updatedTime\": \"{{currentDateTime}}\",\"email\":\"{{newCustodialEmailAddress}}\",\"connectDexcom\":false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/clinics/{{clinicId}}/patients/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinics",
										"{{clinicId}}",
										"patients",
										"{{custodialUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve email key Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"let jsonData = pm.response.json();",
											"assert.common(200, 500, false, jsonData, \"invitedSchema\");",
											"pm.variables.set(\"emailKey\", jsonData.key);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/signup/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"signup",
										"{{custodialUserId}}"
									]
								},
								"description": "Get `emailKey` to use in next request to confirm email"
							},
							"response": []
						},
						{
							"name": "Custodial user confirms email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.get(\"custodialBirthdate\");\r",
											"pm.variables.set(\"custodialPassword\", pm.variables.replaceIn('{{$randomPassword}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"birthday\": \"{{custodialBirthdate}}\",\"password\":\"{{custodialPassword}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"accept",
										"signup",
										"{{emailKey}}"
									]
								},
								"description": "Using `emailKey` to confirm email."
							},
							"response": []
						},
						{
							"name": "Accept terms Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Custodial login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.variables.get(\"custodialEmail\"));",
											"console.log(pm.variables.get(\"custodialPassword\"));",
											"pm.variables.get(\"custodialEmail\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{custodialPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{custodialEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);\r",
											"assert.common(204, 2000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"password\":\"{{custodialPassword}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/users/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{custodialUserId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Clinician adds new custodial patient, uploads data, and creates notes. Custodial patient claims account."
				},
				{
					"name": "Upload with jellyfish",
					"item": [
						{
							"name": "DSA sign-up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.collectionVariables.set(\"signupPw\", uuid.v4().slice(0,9));",
											"let newUserEmailAddress = \"automated-tests+user_datetag_@tidepool.org\";",
											"pm.variables.set('newUserEmailAddress', newUserEmailAddress.replace('_datetag_', \"+skip+\" + \"f7CgVkBHn6yyyB8mZNea9NixoPNZNQQc\" + Date.now() + uuid.v4().slice(0,5)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.collectionVariables.set(\"userId\", jsonData.userid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{newUserEmailAddress}}\",\"password\":\"{{signupPw}}\",\"emails\":[\"{{newUserEmailAddress}}\"],\"roles\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "Accept terms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Initial DSA profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.collectionVariables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));\r",
											"pm.collectionVariables.set(\"fullName\", pm.variables.replaceIn(\"{{$randomFullName}}\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{fullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name and birthdate (18 years old) for the new user."
							},
							"response": []
						},
						{
							"name": "upload device data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"let currentTimestamp = Date.now();",
											"pm.variables.set(\"currentDate\", moment().format());",
											"pm.variables.set('currentTimestamp', currentTimestamp);",
											"pm.variables.set(\"guid\", pm.variables.replaceIn('{{$guid}}'));",
											"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
											"pm.collectionVariables.set(\"uploadId\", pm.variables.replaceIn('{{$guid}}').replace(/-/g, '').slice(0,12));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"pump-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"normal\": 2.47,\n    \"payload\": {\n        \"logIndices\": [\n            2\n        ]\n    },\n    \"subType\": \"normal\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": -300,\n    \"type\": \"bolus\",\n    \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"pump-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"payload\": {\n        \"logIndices\": [\n            1\n        ],\n        \"type\": [\n            \"Five Minute Reading (FMR)\"\n        ]\n    },\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": -300,\n    \"type\": \"cbg\",\n    \"units\": \"mmol/L\",\n    \"uploadId\": \"{{uploadId}}\",\n    \"value\": 8.437136946389211\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						},
						{
							"name": "Retrieve last SMBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload meter data."
							},
							"response": []
						},
						{
							"name": "Retrieve last CBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);\r",
											"assert.common(204, 2000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"password\":\"{{signupPw}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Continous upload with platform data (mobile)",
					"item": [
						{
							"name": "DSA sign-up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.collectionVariables.set(\"signupPw\", uuid.v4().slice(0,9));",
											"let newUserEmailAddress = \"automated-tests+user_datetag_@tidepool.org\";",
											"pm.collectionVariables.set('newUserEmailAddress', newUserEmailAddress.replace('_datetag_', \"+skip+\" + \"f7CgVkBHn6yyyB8mZNea9NixoPNZNQQc\" + Date.now() + uuid.v4().slice(0,5)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.collectionVariables.set(\"userId\", jsonData.userid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{newUserEmailAddress}}\",\"password\":\"{{signupPw}}\",\"emails\":[\"{{newUserEmailAddress}}\"],\"roles\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "Accept terms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Initial DSA profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));\r",
											"pm.variables.set(\"fullName\", pm.variables.replaceIn(\"{{$randomFullName}}\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{fullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name and birthdate (18 years old) for the new user."
							},
							"response": []
						},
						{
							"name": "open upload session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"uploadSessionId\", jsonData.data.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"client\": {\r\n\t\t\t\"name\": \"org.tidepool.mobile\",\r\n\t\t\t\"version\": \"2.1.6\"\r\n\t},\r\n\t\"dataSetType\": \"continuous\",\r\n\t\"deduplicator\": {\r\n\t\t\"name\": \"org.tidepool.deduplicator.dataset.delete.origin\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}/datasets",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}",
										"datasets"
									]
								},
								"description": "Open a continuous upload session"
							},
							"response": []
						},
						{
							"name": "retrieve existing continous session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Upload session retrieved is the same one we created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.collectionVariables.get(\"uploadSessionId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}/datasets",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}",
										"datasets"
									]
								},
								"description": "retrieve the ID of the continuous upload session created"
							},
							"response": []
						},
						{
							"name": "upload healthkit data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$guid}}\").replace(/-/g, ''));\r",
											"const moment = require('moment');\r",
											"let now = moment();\r",
											"pm.variables.set(\"uploadTime\", now.format());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"cbg\",\r\n\t\"value\": 16.04166,\r\n\t\"units\": \"mmol/L\",\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"41RQLJ 8332825\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n\t\t\"com.loudnate.GlucoseKit.HKMetadataKey.GlucoseIsDisplayOnly\": 0,\r\n        \"device\": {\r\n\t\t\t\"manufacturer\": \"Dexcom\",\r\n\t\t\t\"model\": \"G5 Mobile\",\r\n\t\t\t\"name\": \"CGMBLEKit\",\r\n\t\t\t\"softwareVersion\": \"20.0\",\r\n\t\t\t\"udiDeviceIdentifier\": \"00386270000002\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"basal\",\r\n    \"deliveryType\": \"temp\",\r\n    \"duration\": 300000,\r\n\t\"rate\": 6,\r\n    \"surpressed\": {\r\n        \"deliveryType\": \"scheduled\",\r\n        \"rate\": 1.4,\r\n        \"type\": \"basal\"\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"16011cc3174513\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"HasLoopKitOrigin\": 1,\r\n\t\t\"HKInsulinDeliveryReason\": 1,\r\n        \"com.loopkit.InsulinKit.MetadataKeyScheduledBasalRate\": \"1.4 IU/hr\",\r\n        \"device\": {\r\n\t\t\t\"firmwareVersion\": \"subg_rfspy 2.2\",\r\n\t\t\t\t\"localIdentifier\": \"979142\",\r\n\t\t\t\t\"manufacturer\": \"Medtronic\",\r\n\t\t\t\t\"model\": \"754\",\r\n\t\t\t\t\"name\": \"Testing\",\r\n\t\t\t\t\"softwareVersion\": \"44.0\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},{\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"bolus\",\r\n    \"subType\": \"normal\",\r\n    \"normal\": 2,\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"0100500050003c0035e7564513\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"HasLoopKitOrigin\": 1,\r\n\t\t\"HKInsulinDeliveryReason\": 2,\r\n        \"device\": {\r\n\t\t\t\"firmwareVersion\": \"subg_rfspy 2.2\",\r\n\t\t\t\t\"localIdentifier\": \"979142\",\r\n\t\t\t\t\"manufacturer\": \"Medtronic\",\r\n\t\t\t\t\"model\": \"754\",\r\n\t\t\t\t\"name\": \"Testing\",\r\n\t\t\t\t\"softwareVersion\": \"44.0\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},{\r\n\t\"time\": \"{{uploadTime}}\",\r\n    \"name\": \"\\ud83e\\udd67\",\r\n\t\"type\": \"food\",\r\n    \"nutrition\": {\r\n        \"carbohydrate\": {\r\n            \"net\": 30,\r\n            \"units\": \"grams\"\r\n        }\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"35C3AE35-142B-4FF0-8B2E-784066849A50\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"com.loudnate.CarbKit.HKMetadataKey.AbsorptionTimeMinutes\": 7200,\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},\r\n{\r\n\t\"time\": \"{{uploadTime}}\",\r\n    \"name\": \"Traditional Strength Training\",\r\n\t\"type\": \"physicalActivity\",\r\n    \"duration\": {\r\n        \"units\": \"seconds\",\r\n        \"value\": 518\r\n    },\r\n    \"energy\": {\r\n        \"units\": \"kilocalories\",\r\n        \"value\": 23\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n        \"Workout Name\": \"Quick Abs\",\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.oneothergame.7min-fitness\",\r\n\t\t\t\t\"name\": \"Workout for Women\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"3.5.0.1\"\r\n\t\t}\r\n\t}\r\n}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/dataservices/v1/datasets/{{uploadSessionId}}/data",
									"host": [
										"{{api}}"
									],
									"path": [
										"dataservices",
										"v1",
										"datasets",
										"{{uploadSessionId}}",
										"data"
									]
								},
								"description": "Upload ios healthkit data to the continous upload session opened in the previous request"
							},
							"response": []
						},
						{
							"name": "Retrieve last cbg healthkit data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload healthkit cgm data."
							},
							"response": []
						},
						{
							"name": "Retrieve last bolus healthkit data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload healthkit pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last basal healthkit data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=basal",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "basal"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload healthkit pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last food data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=food",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "food"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload healthkit nutrition data."
							},
							"response": []
						},
						{
							"name": "Retrieve last physical activity data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"the returned item is the same that we uploaded\", function () {\r",
											"pm.expect(jsonData[0].uploadId).to.eql(pm.collectionVariables.get(\"uploadSessionId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=physicalActivity",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "physicalActivity"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload healthkit activity data."
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);\r",
											"assert.common(204, 2000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"password\":\"{{signupPw}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This series of tests is designed to test the continous upload workflow, which simulates how our users upload with Tidepool mobile."
				},
				{
					"name": "Normal upload session with platform data (Libre)",
					"item": [
						{
							"name": "DSA sign-up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.collectionVariables.set(\"signupPw\", uuid.v4().slice(0,9));",
											"let newUserEmailAddress = \"automated-tests+user_datetag_@tidepool.org\";",
											"pm.collectionVariables.set('newUserEmailAddress', newUserEmailAddress.replace('_datetag_', \"+skip+\" + \"f7CgVkBHn6yyyB8mZNea9NixoPNZNQQc\" + Date.now() + uuid.v4().slice(0,5)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.collectionVariables.set(\"userId\", jsonData.userid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{newUserEmailAddress}}\",\"password\":\"{{signupPw}}\",\"emails\":[\"{{newUserEmailAddress}}\"],\"roles\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "Accept terms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Initial DSA profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.collectionVariables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));\r",
											"pm.variables.set(\"fullName\", pm.variables.replaceIn(\"{{$randomFullName}}\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{fullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name and birthdate (18 years old) for the new user."
							},
							"response": []
						},
						{
							"name": "Add Libre device",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{fullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"email\":\"{{newUserEmailAddress}}\",\"targetDevices\":[\"abbottfreestylelibre\"], \"targetTimezone\": \"US/Eastern\"},\"emails\":[\"{{newUserEmailAddress}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name and birthdate (18 years old) for the new user."
							},
							"response": []
						},
						{
							"name": "Open normal upload session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"uploadSessionId\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"type\":\"upload\",\r\n\"computerTime\":\"{{currentDateWithoutOffset}}\",\r\n\"time\":\"{{currentDate}}\",\r\n\"timezoneOffset\":-300,\r\n\"conversionOffset\":0,\r\n\"timezone\":\"US/Eastern\",\r\n\"timeProcessing\":\"utc-bootstrapping\",\r\n\"version\":\"2.34.0\",\r\n\"deviceTags\":[\"bgm\",\"cgm\"],\r\n\"deviceTime\":\"{{currentDateWithoutOffset}}\",\r\n\"deviceManufacturers\":[\"Abbott\"],\r\n\"deviceModel\":\"FreeStyle Libre\",\r\n\"deviceSerialNumber\":\"JNGZ162-T0111\",\r\n\"deviceId\":\"AbbottFreeStyleLibre-JNGZ162-T0111\",\r\n\"client\":{\r\n    \"name\":\"org.tidepool.uploader\",\r\n    \"version\":\"2.34.0\",\r\n    \"private\":{\r\n        \"blobId\":\"{{blobId}}\",\r\n        \"os\":\"win32-x64-10.0.18363\"\r\n        }\r\n    },\r\n\"deduplicator\":{\"name\":\"org.tidepool.deduplicator.device.deactivate.hash\"\r\n}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}/datasets",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}",
										"datasets"
									]
								},
								"description": "Open a continuous upload session"
							},
							"response": []
						},
						{
							"name": "Upload Libre data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"time\":\"2020-12-05T18:06:17.000Z\",\n        \"deviceTime\":\"2020-12-05T13:06:17\",\n        \"deviceId\":\"AbbottFreeStyleLibre-JNGZ162-T0111\",\n        \"type\":\"smbg\",\n        \"value\":85,\n        \"units\":\"mg/dL\"\n    },\n    {\n        \"time\":\"2020-12-02T23:59:57.000Z\",\n        \"deviceTime\":\"2020-12-02T19:59:57\",\n        \"deviceId\":\"AbbottFreeStyleLibre-JNGZ162-T0111\",\n        \"type\":\"cbg\",\n        \"value\":79,\n        \"units\":\"mg/dL\"\n        }\n]"
								},
								"url": {
									"raw": "{{api}}/dataservices/v1/datasets/{{uploadSessionId}}/data",
									"host": [
										"{{api}}"
									],
									"path": [
										"dataservices",
										"v1",
										"datasets",
										"{{uploadSessionId}}",
										"data"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						},
						{
							"name": "Close upload session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"dataState\":\"closed\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/dataservices/v1/datasets/{{uploadSessionId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"dataservices",
										"v1",
										"datasets",
										"{{uploadSessionId}}"
									]
								},
								"description": "Setting up Name and birthdate (18 years old) for the new user."
							},
							"response": []
						},
						{
							"name": "get the last upload session data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.test(\"correct type and corresponding value returned\", function () {",
											"    switch(jsonData[0].type){",
											"        case \"cbg\": ",
											"            pm.expect(jsonData[0].value).to.eql(4.38509);",
											"            break;",
											"        case \"smbg\":",
											"            pm.expect(jsonData[0].value).to.eql(4.71814);",
											"            break;",
											"        default:",
											"            console.log(\"incorrect data type returned\")",
											"",
											"    }",
											"});",
											"pm.test(\"correct type and corresponding value returned\", function () {",
											"    switch(jsonData[1].type){",
											"        case \"cbg\": ",
											"            pm.expect(jsonData[1].value).to.eql(4.38509);",
											"            break;",
											"        case \"smbg\":",
											"            pm.expect(jsonData[1].value).to.eql(4.71814);",
											"            break;",
											"        default:",
											"            console.log(\"incorrect data type returned\")",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?uploadId={{uploadSessionId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "uploadId",
											"value": "{{uploadSessionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"password\":\"{{signupPw}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "A normal upload session is used for “bulk” uploads.\r\n\r\nAn example of this is the Tidepool Uploader: When you use Tidepool Uploader, you are connecting a device to your computer, and using the Tidepool Uploader to read a large set of historical data from the device. Tidepool Uploader will create a normal upload session, and close that session when all data for that diabetes device has been uploaded.\r\n\r\nSubsequent uploads for the same device will create a new normal upload session, and this data will be deduplicated against any previous sessions.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const moment = require('moment');",
									"let currentTimestamp = Date.now();",
									"pm.variables.set(\"currentDate\", moment().format());",
									"pm.variables.set('currentTimestamp', currentTimestamp);",
									"pm.variables.set(\"guid\", pm.variables.replaceIn('{{$guid}}'));",
									"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
									"pm.variables.set(\"blobId\", pm.variables.replaceIn('{{$randomUUID}}').replace(/-/g, ''));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Data storage account signup and setup",
					"item": [
						{
							"name": "DSA sign-up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));",
											"let newUserEmailAddress = \"automated-tests+user_datetag_@tidepool.org\";",
											"pm.variables.set('newUserEmailAddress', newUserEmailAddress.replace('_datetag_', \"+skip+\" + \"f7CgVkBHn6yyyB8mZNea9NixoPNZNQQc\" + Date.now() + uuid.v4().slice(0,5)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"let jsonData = pm.response.json();",
											"assert.common(201, 1000, true, jsonData,\"userAccountSchema\");",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.variables.set(\"userId\", jsonData.userid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{newUserEmailAddress}}\",\"password\":\"{{signupPw}}\",\"emails\":[\"{{newUserEmailAddress}}\"],\"roles\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "Accept terms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Initial DSA profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name and birthdate (18 years old) for the new user."
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"profileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Verify user profile stored successfully."
							},
							"response": []
						},
						{
							"name": "Change BG Units",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"settingsSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bgTarget\":{\"high\":10,\"low\":3.9},\"units\":{\"bg\":\"mmol/L\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/settings",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"settings"
									]
								},
								"description": "Changing BG units to mmol/L, another aspect a user can change in the user profile."
							},
							"response": []
						},
						{
							"name": "Retrieve settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"settingsSchema\");",
											"pm.test(\"Verify settings change to mmol\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.units.bg).to.eql(\"mmol/L\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/settings",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"settings"
									]
								},
								"description": "Verifying the change to mmol/L was stored."
							},
							"response": []
						},
						{
							"name": "Tidepool data donation opt-in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"inviteSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"email\":\"{{dataDonationEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Data donation selection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"inviteSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"email\":\"{{dataDonationOrgEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tidepool data donation opt-out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationEmail}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"{{userId}}",
										"invited",
										"{{dataDonationEmail}}"
									]
								},
								"description": "This removes the data donation option and makes sure our test accounts aren't being added to the data pool."
							},
							"response": []
						},
						{
							"name": "Remove data donation selection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationOrgEmail}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"{{userId}}",
										"invited",
										"{{dataDonationOrgEmail}}"
									]
								},
								"description": "This removes the data donation selection 'JDRF' and makes sure our test accounts aren't being added to the data pool."
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);\r",
											"assert.common(204, 2000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"password\":\"{{signupPw}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The initial interactions a user goes through to sign up for tidepool and set up their profile."
				},
				{
					"name": "Legacy Clinican User Migrates to Clinic Account",
					"item": [
						{
							"name": "create new account - legacy clinician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"let jsonData = pm.response.json();",
											"assert.common(201, 1000, true, jsonData,\"userAccountSchema\");",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.variables.set(\"userId\", jsonData.userid);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set('signupPw', uuid.v4().slice(0,9));",
											"let newClinicianEmailAddress = \"automated-tests+clinician_datetag_@tidepool.org\";",
											"pm.variables.set('newClinicianEmailAddress', newClinicianEmailAddress.replace('_datetag_', \"+skip+\" + \"f7CgVkBHn6yyyB8mZNea9NixoPNZNQQc\" + Date.now() + uuid.v4().slice(0,5)));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{newClinicianEmailAddress}}\",\n    \"password\": \"{{signupPw}}\",\n    \"emails\": [\n        \"{{newClinicianEmailAddress}}\"\n    ],\n    \"roles\": [\n        \"clinic\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for the clinician account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "get current user Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response should be {\"emailVerified\":true,\"emails\":[\"ginny+apitestswithburp@tidepool.org\"],\"roles\":[\"clinician\",\"default-roles-tidepool\"],\"termsAccepted\":\"2023-03-28T21:02:47+00:00\",\"userid\":\"316397f9-2c4a-41cb-abaa-d90c151c168b\",\"username\":\"ginny+apitestswithburp@tidepool.org\"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "list data sources for user Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//check should be empty array because we just created this user and haven't uploaded"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}/data_sources",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}",
										"data_sources"
									]
								}
							},
							"response": []
						},
						{
							"name": "list clinics for clinician Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//should be empty array as we havent created a clinic yet "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinicians/{{userId}}/clinics?limit=1000&offset=0",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinicians",
										"{{userId}}",
										"clinics"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list invites for clinician Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//should be 404 {\"code\":404,\"reason\":\"Nothing found\"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/v1/clinicians/{{userId}}/invites",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"clinicians",
										"{{userId}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "list users with trustee or trustor access Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//legacy clinician so it has jill jellyfish shared"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/users/{{userId}}/users",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"users",
										"{{userId}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "update user metadata - profile Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"fullName\":\"Ginny API Testing\",\"clinic\":{\"role\":\"clinic_manager\",\"npi\":\"1230000548\"}}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"clinic\":{\"role\":\"endocrinologist\",\"name\":\"{{$randomCompanyName}} Clinic\",\"telephone\":\"{{$randomPhoneNumber}}\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "update user metadata - preferences Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response just a 200 no body"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/preferences",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"preferences"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "get current user Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response should be {\"emailVerified\":true,\"emails\":[\"ginny+apitestswithburp@tidepool.org\"],\"roles\":[\"clinician\",\"default-roles-tidepool\"],\"termsAccepted\":\"2023-03-28T21:02:47+00:00\",\"userid\":\"316397f9-2c4a-41cb-abaa-d90c151c168b\",\"username\":\"ginny+apitestswithburp@tidepool.org\"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "get current user metadata - profile Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"fullName\":\"Ginny API Testing\",\"clinic\":{\"role\":\"clinic_manager\",\"npi\":\"1230000548\"}}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "create custodial user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"emailVerified\":false,\"roles\":[\"patient\",\"custodial_account\",\"default-roles-qa2\"],\"userid\":\"a45f8a7d-6268-4ffb-90b3-f19591eb963e\"}",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"custodialUserId\", jsonData.userid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user/{{userId}}/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user",
										"{{userId}}",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "list users with trustee or trustor access Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//[{\"emailVerified\":false,\"roles\":[\"patient\",\"custodial_account\",\"default-roles-qa2\"],\"userid\":\"17b7f89e-7138-4cc0-87d2-4a9eb8634d06\",\"trustorPermissions\":{\"custodian\":{},\"upload\":{},\"view\":{}},\"profile\":{\"fullName\":\"a custodial account\",\"patient\":{\"birthday\":\"1980-01-01\",\"mrn\":\"12345\",\"targetDevices\":[\"onetouchverioiq\"],\"targetTimezone\":\"US/Eastern\"}}},{\"emailVerified\":true,\"emails\":[\"demo+jill@tidepool.org\"],\"termsAccepted\":\"2017-04-27T14:44:06-07:00\",\"userid\":\"676404ec56\",\"username\":\"demo+jill@tidepool.org\",\"trustorPermissions\":{\"view\":{}},\"profile\":{\"fullName\":\"Jilly Jellyfish\",\"patient\":{\"birthday\":\"2000-01-01\",\"diagnosisDate\":\"2000-01-01\",\"targetDevices\":[\"dexcom\",\"omnipod\"],\"targetTimezone\":\"US/Pacific\"}}}]",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"custodialUserId\", jsonData[0].userid); //need a way to make sure this is the custodian"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/users/{{userId}}/users",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"users",
										"{{userId}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "update custodial user metadata - profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"fullName\":\"a custodial account\",\"patient\":{\"birthday\":\"1980-01-01\",\"mrn\":\"12345\",\"targetDevices\":[\"onetouchverioiq\"]}}",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"custodialBirthdate\", jsonData.birthDate);",
											"pm.variables.set(\"fullName\", jsonData.fullName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');",
											"",
											"let newMoment = moment().subtract(18, 'years');",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"mrn\":\"{{$randomBankAccount}}\",\"targetDevices\":[\"onetouchverioiq\"],\"targetTimezone\":\"US/Eastern\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{custodialUserId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "get custodial user metadata - profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"fullName\":\"a custodial account\",\"patient\":{\"birthday\":\"1980-01-01\",\"mrn\":\"12345\"}}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{custodialUserId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "get current time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// response {\"data\":{\"time\":\"2023-03-29T03:10:28.107Z\"},\"meta\":{\"trace\":{\"request\":\"d7da2a93182a3271bf485cfc2ac786c8\"}}}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/dataservices/v1/time",
									"host": [
										"{{api}}"
									],
									"path": [
										"dataservices",
										"v1",
										"time"
									]
								}
							},
							"response": []
						},
						{
							"name": "upload device data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"fullName\":\"a custodial account\",\"patient\":{\"birthday\":\"1980-01-01\",\"mrn\":\"12345\",\"targetDevices\":[\"onetouchverioiq\"]}}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\"time\":\"2018-06-12T13:23:29.000Z\",\"timezoneOffset\":-240,\"clockDriftOffset\":0,\"conversionOffset\":0,\"deviceTime\":\"2018-06-12T09:23:29\",\"deviceId\":\"OneTouchVerioIQ-TFHBM1J4\",\"type\":\"smbg\",\"value\":197,\"units\":\"mg/dL\",\"uploadId\":\"upid_4e42fd0d2708\",\"guid\":\"d8478ccd-a737-4862-8c18-7a1cfa0a32b9\"},{\"time\":\"2017-07-17T19:22:07.000Z\",\"timezoneOffset\":-240,\"clockDriftOffset\":0,\"conversionOffset\":0,\"deviceTime\":\"2017-07-17T15:22:07\",\"deviceId\":\"OneTouchVerioIQ-TFHBM1J4\",\"type\":\"smbg\",\"value\":77,\"units\":\"mg/dL\",\"uploadId\":\"upid_4e42fd0d2708\",\"guid\":\"a87b75e0-fe5f-4c6d-98e1-a0f15c2a8f49\"}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "get custodial user latest data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"fullName\":\"a custodial account\",\"patient\":{\"birthday\":\"1980-01-01\",\"mrn\":\"12345\"}}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?endDate=2023-03-30T03:34:03.122Z&latest=1&type=cbg,smbg,basal,bolus,wizard,food,pumpSettings,upload",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "endDate",
											"value": "2023-03-30T03:34:03.122Z"
										},
										{
											"key": "latest",
											"value": "1"
										},
										{
											"key": "type",
											"value": "cbg,smbg,basal,bolus,wizard,food,pumpSettings,upload"
										}
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "get current user Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"termsAccepted\", jsonData.termsAccepted);",
											"pm.variables.set(\"termsAccepted\", jsonData.termsAccepted);",
											"pm.variables.set(\"username\", jsonData.username);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "new role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"roles\":[\"clinic\"]}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for the clinician account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "migrate legacy clinician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//response {\"canMigrate\":false,\"createdTime\":\"2023-03-29T03:53:33.361Z\",\"id\":\"6423b63d6e6828fe8570467a\",\"name\":\"\",\"preferredBgUnits\":\"mg/dL\",\"shareCode\":\"WHNF-QZA5-9BRB\",\"tier\":\"tier0100\",\"tierDescription\":\"Free\",\"updatedTime\":\"2023-03-29T03:53:33.361Z\"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/api/v1/clinicians/{{userId}}/migrate",
									"host": [
										"{{api}}"
									],
									"path": [
										"api",
										"v1",
										"clinicians",
										"{{userId}}",
										"migrate"
									]
								},
								"description": "Setting up Name, clinician name, role and telephone number."
							},
							"response": []
						}
					]
				},
				{
					"name": "Legacy Clinician User Joins A Clinic",
					"item": []
				},
				{
					"name": "New Clinician User Joins An Existing Clinic",
					"item": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/* const now = Date.now();",
							"",
							"const tokenExpiration = parseInt(pm.variables.get(\"tokenExpiration\"), 10);",
							"",
							"",
							"if (now >= tokenExpiration - 10000) {",
							"    const requestOptions = {",
							"        method: \"POST\",",
							"        url: \"https://auth.qa2.tidepool.org/realms/qa1/protocol/openid-connect/token\",",
							"        header: {",
							"        \"Content-Type\": \"'application/x-www-form-urlencoded'\",",
							"        },",
							"        body: {",
							"            mode: 'urlencoded',",
							"            urlencoded: [",
							"            {key:\"refresh_token\", value: pm.collectionVariables.get(\"refreshToken\")},",
							"            {key:\"grant_type\", value: \"refresh_token\"},",
							"            {key:\"client_id\", value: \"blip\"}",
							"            ]}",
							"    };",
							"",
							"    pm.sendRequest(requestOptions, (error, response) => {",
							"        if (error) {",
							"            console.error(\"Error getting new token:\", error);",
							"            return;",
							"        }",
							"        let expiresIn = Date.now() + response.json().expires_in * 1000",
							"        pm.collectionVariables.set(\"sessionToken\", response.json().access_token);",
							"        pm.collectionVariables.set(\"tokenExpiration\", expiresIn);",
							"        pm.collectionVariables.set(\"refreshToken\", response.json().refresh_token);",
							"    });",
							"",
							"}",
							"",
							"console.log(\"sessionToken\", pm.collectionVariables.get(\"sessionToken\"))",
							"*/"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "User actions with invalid token",
							"item": [
								{
									"name": "DSA login - create invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"pm.variables.set(\"userId\", jsonData.userid);",
													"pm.variables.set(\"sessionToken\", pm.variables.replaceIn('{{$randomUUID}}'));",
													"const assert = eval(globals.loadAsserts);",
													"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{loginPw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{loginEmail}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{api}}/auth/login",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a users account information - invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 300, false, pm.response.json(),\"errorSchema\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"url": {
											"raw": "{{api}}/auth/user",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a users profile information - invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 300, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"url": {
											"raw": "{{api}}/metadata/{{userId}}/profile",
											"host": [
												"{{api}}"
											],
											"path": [
												"metadata",
												"{{userId}}",
												"profile"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload device data - invalid token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guid\", pm.variables.replaceIn(\"{{$guid}}\"));",
													"const moment = require('moment');",
													"pm.variables.set(\"currentDate\", moment().format());",
													"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
													"pm.variables.set(\"uploadId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, '').slice(0,12));",
													"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, ''));",
													"pm.variables.set(\"smbgValue\", 11.331314156239124);",
													"pm.variables.set(\"bolusValue\", 2.47);",
													"pm.variables.set(\"cbgValue\", 8.437136946389211);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 1000, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
										},
										"url": {
											"raw": "{{api}}/data/{{userId}}",
											"host": [
												"{{api}}"
											],
											"path": [
												"data",
												"{{userId}}"
											]
										},
										"description": "uploading smbg, cbg and bolus data"
									},
									"response": []
								}
							],
							"description": "Sending requests for profile information and attempting to upload data with an invalid token"
						},
						{
							"name": "User actions with incorrect token",
							"item": [
								{
									"name": "DSA login - get incorrect token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"pm.variables.set(\"userId\", jsonData.userid);",
													"pm.variables.set(\"sessionToken\", pm.variables.replaceIn('{{$randomUUID}}'));",
													"const assert = eval(globals.loadAsserts);",
													"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{clinicianEmail}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{clinicianPw}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{api}}/auth/login",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a users account information - incorrect token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 300, false, pm.response.json(),\"errorSchema\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"url": {
											"raw": "{{api}}/auth/user",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a users profile information - incorrect token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 300, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"url": {
											"raw": "{{api}}/metadata/{{userId}}/profile",
											"host": [
												"{{api}}"
											],
											"path": [
												"metadata",
												"{{userId}}",
												"profile"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload device data - incorrect token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guid\", pm.variables.replaceIn(\"{{$guid}}\"));",
													"const moment = require('moment');",
													"pm.variables.set(\"currentDate\", moment().format());",
													"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
													"pm.variables.set(\"uploadId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, '').slice(0,12));",
													"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, ''));",
													"pm.variables.set(\"smbgValue\", 11.331314156239124);",
													"pm.variables.set(\"bolusValue\", 2.47);",
													"pm.variables.set(\"cbgValue\", 8.437136946389211);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 1000, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
										},
										"url": {
											"raw": "{{api}}/data/{{userId}}",
											"host": [
												"{{api}}"
											],
											"path": [
												"data",
												"{{userId}}"
											]
										},
										"description": "uploading smbg, cbg and bolus data"
									},
									"response": []
								}
							],
							"description": "Attempting to get user profile information and upload data with an incorrect token (another user's token)"
						},
						{
							"name": "User actions with no token",
							"item": [
								{
									"name": "DSA login - set empty token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"pm.variables.set(\"userId\", jsonData.userid);",
													"pm.variables.set(\"sessionToken\", \"\");",
													"const assert = eval(globals.loadAsserts);",
													"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{clinicianEmail}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{clinicianPw}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{api}}/auth/login",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a users account information - empty token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 300, false, pm.response.json(),\"errorSchema\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"url": {
											"raw": "{{api}}/auth/user",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a users profile information - empty token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 300, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"url": {
											"raw": "{{api}}/metadata/{{userId}}/profile",
											"host": [
												"{{api}}"
											],
											"path": [
												"metadata",
												"{{userId}}",
												"profile"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload device data - empty token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guid\", pm.variables.replaceIn(\"{{$guid}}\"));",
													"const moment = require('moment');",
													"pm.variables.set(\"currentDate\", moment().format());",
													"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
													"pm.variables.set(\"uploadId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, '').slice(0,12));",
													"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, ''));",
													"pm.variables.set(\"smbgValue\", 11.331314156239124);",
													"pm.variables.set(\"bolusValue\", 2.47);",
													"pm.variables.set(\"cbgValue\", 8.437136946389211);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 1000, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
										},
										"url": {
											"raw": "{{api}}/data/{{userId}}",
											"host": [
												"{{api}}"
											],
											"path": [
												"data",
												"{{userId}}"
											]
										},
										"description": "uploading smbg, cbg and bolus data"
									},
									"response": []
								}
							],
							"description": "Attempting to get user profile information and upload data with an no token"
						},
						{
							"name": "User actions with expired token",
							"item": [
								{
									"name": "DSA login - get valid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"pm.variables.set(\"userId\", jsonData.userid);",
													"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
													"const assert = eval(globals.loadAsserts);",
													"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{clinicianEmail}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{clinicianPw}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{api}}/auth/login",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout of tidepool - expire token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(200, 300, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{api}}/auth/logout",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a users account information - expired token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 300, false, pm.response.json(),\"errorSchema\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"url": {
											"raw": "{{api}}/auth/user",
											"host": [
												"{{api}}"
											],
											"path": [
												"auth",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "get a users profile information - expired token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 300, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"url": {
											"raw": "{{api}}/metadata/{{userId}}/profile",
											"host": [
												"{{api}}"
											],
											"path": [
												"metadata",
												"{{userId}}",
												"profile"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload device data - expired token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guid\", pm.variables.replaceIn(\"{{$guid}}\"));",
													"const moment = require('moment');",
													"pm.variables.set(\"currentDate\", moment().format());",
													"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
													"pm.variables.set(\"uploadId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, '').slice(0,12));",
													"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, ''));",
													"pm.variables.set(\"smbgValue\", 11.331314156239124);",
													"pm.variables.set(\"bolusValue\", 2.47);",
													"pm.variables.set(\"cbgValue\", 8.437136946389211);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const assert = eval(globals.loadAsserts);",
													"assert.common(401, 1000, false, null, \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-tidepool-session-token",
												"value": "{{sessionToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
										},
										"url": {
											"raw": "{{api}}/data/{{userId}}",
											"host": [
												"{{api}}"
											],
											"path": [
												"data",
												"{{userId}}"
											]
										},
										"description": "uploading smbg, cbg and bolus data"
									},
									"response": []
								}
							],
							"description": "Attempting to get user profile information and upload data with an expired token"
						}
					],
					"description": "These tests execute the unhappy path by submitting incorrect or missing information"
				}
			]
		},
		{
			"name": "Status Checks",
			"item": [
				{
					"name": "auth status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "confirm status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/confirm/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "data status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/data/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "dataservices status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/dataservices/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"dataservices",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "export status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/export/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"export",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "metrics status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/metrics/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"metrics",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "info status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(304, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/info",
							"host": [
								"{{api}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security",
			"item": []
		},
		{
			"name": "Blip Authentication",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let usersSchema = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"emailVerified\",",
					"        \"userid\"",
					"    ],",
					"    \"properties\": {",
					"        \"emailVerified\": {",
					"            \"type\": \"boolean\"",
					"        },",
					"        \"emails\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"string\"",
					"            }",
					"        },",
					"        \"roles\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"string\"",
					"            }",
					"        },",
					"        \"termsAccepted\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"userid\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"username\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"createdTime\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"modifiedTime\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"modifiedUserId\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"deletedTime\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"deletedUserId\": {",
					"            \"type\": \"string\"",
					"        }",
					"    }",
					"};",
					"",
					"pm.collectionVariables.set(\"usersSchema\", JSON.stringify(usersSchema));",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//not using let, var or any other keyword allows this to be attached to Postman's global sandbox object so it can be reused in other tests",
					"console.log('Actual response time in ms ', pm.response.responseTime);",
					"utils = {",
					"    responseTypeJson: function() {",
					"        pm.test('Response type is application/json', function() {",
					"            pm.expect(pm.response.headers.get('content-type')).to.include('application/json');",
					"        });",
					"    },",
					"",
					"    responseHasSessionToken: function() {",
					"        pm.test('Response has x-tidepool-session-token', function() {",
					"            pm.response.to.have.header('x-tidepool-session-token');",
					"        });",
					"    },",
					"",
					"    responseHasNoSessionToken: function() {",
					"        pm.test('Response has NO x-tidepool-session-token', function() {",
					"            pm.response.to.not.have.header('x-tidepool-session-token');",
					"        });",
					"    },",
					"",
					"    responseBodyMatchesSchema: function(schemaKey) {",
					"        let schema = pm.collectionVariables.get(schemaKey);",
					"        pm.test(`Response body matches ${schemaKey}`, function() {",
					"            pm.response.to.have.jsonSchema(JSON.parse(schema));",
					"        });",
					"    },",
					"",
					"    testResponse: function(method, expectedResponseCode) {",
					"        pm.test(`Successful ${method} request`, function() {",
					"            pm.expect(pm.response.code).to.be.oneOf(expectedResponseCode);",
					"        });",
					"    },",
					"",
					"    responseTime: function() {",
					"        pm.test('Response time is less than 3000ms', function() {",
					"            pm.expect(pm.response.responseTime).to.be.below(3000);",
					"        });",
					"    },",
					"",
					"    commonTests: function(schemaKey) {",
					"        this.responseTime();",
					"",
					"        if (pm.info.requestName.includes(\"create new account\" || \"login\")){ ",
					"        this.responseHasSessionToken()} else {",
					"        this.responseHasNoSessionToken();",
					"        }",
					"",
					"        if (pm.response) {",
					"            this.responseTypeJson();",
					"        }",
					"        if (schemaKey){",
					"        this.responseBodyMatchesSchema(schemaKey);",
					"        }",
					"        const responseCodeMap = {",
					"            POST: [201],",
					"            GET: [200],",
					"            PUT: [200],",
					"            DELETE: [204]",
					"        };",
					"        this.testResponse(pm.request.method, responseCodeMap[pm.request.method]);",
					"    }",
					"};"
				]
			}
		}
	],
	"variable": [
		{
			"key": "sessionToken",
			"value": ""
		},
		{
			"key": "clinicianUserId",
			"value": ""
		},
		{
			"key": "usersSchema",
			"value": ""
		},
		{
			"key": "jsonData",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "tokenExpiration",
			"value": ""
		},
		{
			"key": "signupPw",
			"value": ""
		},
		{
			"key": "refreshToken",
			"value": ""
		},
		{
			"key": "uploadSessionId",
			"value": ""
		},
		{
			"key": "currentTimestamp",
			"value": ""
		},
		{
			"key": "birthdate",
			"value": ""
		},
		{
			"key": "clinicId",
			"value": ""
		},
		{
			"key": "fullName",
			"value": ""
		},
		{
			"key": "uploadId",
			"value": ""
		},
		{
			"key": "newUserEmailAddress",
			"value": ""
		}
	]
}