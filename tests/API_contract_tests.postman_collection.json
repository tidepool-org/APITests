{
	"info": {
		"_postman_id": "d5fe7b4e-2a09-4b22-95c5-4b70702096bd",
		"name": "API_contract_tests",
		"description": "Contract tests using the tidepool API with the goal of testing the interaction between the Tidepool APis to see that its is working as a client expects. We are looking at\r\n\r\n - response code\r\n - response timing \r\n - headers, specifically the x-tidepool-session and content type\r\n - response json data to make sure it matches our schema expectations at a high level",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Clinician signup and setup",
			"item": [
				{
					"name": "Clinician sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(201, 1000, true, jsonData,\"userAccountSchema\");",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{newClinicianEmailAddress}}\",\n    \"password\": \"{{signupPw}}\",\n    \"emails\": [\n        \"{{newClinicianEmailAddress}}\"\n    ],\n    \"roles\": [\n        \"clinic\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for the clinician account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(200, 500, false, jsonData, \"invitedSchema\");",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentDate}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial clinician profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"clinic\":{\"role\":\"endocrinologist\",\"name\":\"{{$randomCompanyName}} Clinic\",\"telephone\":\"{{$randomPhoneNumber}}\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name, clinician name, role and telephone number."
					},
					"response": []
				},
				{
					"name": "get the clinician account information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve clinician profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Clinician signs up for tidepool, and fills out profile.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const uuid = require('uuid');",
							"const moment = require('moment');",
							"pm.variables.set('signupPw', uuid.v4().slice(0,9));",
							"let newClinicianEmailAddress = pm.variables.get('newClinicianEmailAddress');",
							"pm.variables.set('newClinicianEmailAddress', newClinicianEmailAddress.replace('_datetag_', Date.now()));",
							"pm.variables.set(\"currentDate\", moment().format());"
						]
					}
				}
			]
		},
		{
			"name": "Data storage account signup and setup",
			"item": [
				{
					"name": "DSA sign-up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));",
									"let newUserEmailAddress = pm.variables.get('newUserEmailAddress');",
									"pm.variables.set('newUserEmailAddress', newUserEmailAddress.replace('_datetag_', Date.now()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(201, 1000, true, jsonData,\"userAccountSchema\");",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{newUserEmailAddress}}\",\"password\":\"{{signupPw}}\",\"emails\":[\"{{newUserEmailAddress}}\"],\"roles\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(200, 500, false, jsonData, \"invitedSchema\");",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial DSA profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name and birthdate (18 years old) for the new user."
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Change BG Units",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"settingsSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"bgTarget\":{\"high\":10,\"low\":3.9},\"units\":{\"bg\":\"mmol/L\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/settings",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"settings"
							]
						},
						"description": "Changing BG units to mmol/L, another aspect a user can change in the user profile."
					},
					"response": []
				},
				{
					"name": "Retrieve settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"settingsSchema\");",
									"pm.test(\"Verify settings change to mmol\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.units.bg).to.eql(\"mmol/L\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/settings",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"settings"
							]
						},
						"description": "Verifying the change to mmol/L was stored."
					},
					"response": []
				},
				{
					"name": "Tidepool data donation opt-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"inviteSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{dataDonationEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Data donation selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"inviteSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{dataDonationOrgEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tidepool data donation opt-out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{dataDonationEmail}}"
							]
						},
						"description": "This removes the data donation option and makes sure our test accounts aren't being added to the data pool."
					},
					"response": []
				},
				{
					"name": "Remove data donation selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationOrgEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{dataDonationOrgEmail}}"
							]
						},
						"description": "This removes the data donation selection 'JDRF' and makes sure our test accounts aren't being added to the data pool."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(204, 2000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\":\"{{signupPw}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "The initial interactions a user goes through to sign up for tidepool and set up their profile.",
			"event": []
		},
		{
			"name": "Normal upload session with platform data (Libre)",
			"item": [
				{
					"name": "DSA sign-up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));",
									"let newUserEmailAddress = pm.variables.get('newUserEmailAddress');",
									"pm.variables.set('newUserEmailAddress', newUserEmailAddress.replace('_datetag_', Date.now() + uuid.v4().slice(0,5)));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(201, 1000, true, jsonData,\"userAccountSchema\");",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{newUserEmailAddress}}\",\"password\":\"{{signupPw}}\",\"emails\":[\"{{newUserEmailAddress}}\"],\"roles\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(200, 500, false, jsonData, \"invitedSchema\");",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial DSA profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));\r",
									"pm.variables.set(\"fullName\", pm.variables.replaceIn(\"{{$randomFullName}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{fullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name and birthdate (18 years old) for the new user."
					},
					"response": []
				},
				{
					"name": "Add Libre device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{fullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"email\":\"{{newUserEmailAddress}}\",\"targetDevices\":[\"abbottfreestylelibre\"], \"targetTimezone\": \"US/Eastern\"},\"emails\":[\"{{newUserEmailAddress}}\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name and birthdate (18 years old) for the new user."
					},
					"response": []
				},
				{
					"name": "Open normal upload session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(201, 500, false, jsonData,\"datasetSchema\");\r",
									"pm.variables.set(\"uploadSessionId\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"type\":\"upload\",\r\n\"computerTime\":\"{{currentDateWithoutOffset}}\",\r\n\"time\":\"{{currentDate}}\",\r\n\"timezoneOffset\":-300,\r\n\"conversionOffset\":0,\r\n\"timezone\":\"US/Eastern\",\r\n\"timeProcessing\":\"utc-bootstrapping\",\r\n\"version\":\"2.34.0\",\r\n\"deviceTags\":[\"bgm\",\"cgm\"],\r\n\"deviceTime\":\"{{currentDateWithoutOffset}}\",\r\n\"deviceManufacturers\":[\"Abbott\"],\r\n\"deviceModel\":\"FreeStyle Libre\",\r\n\"deviceSerialNumber\":\"JNGZ162-T0111\",\r\n\"deviceId\":\"AbbottFreeStyleLibre-JNGZ162-T0111\",\r\n\"client\":{\r\n    \"name\":\"org.tidepool.uploader\",\r\n    \"version\":\"2.34.0\",\r\n    \"private\":{\r\n        \"blobId\":\"{{blobId}}\",\r\n        \"os\":\"win32-x64-10.0.18363\"\r\n        }\r\n    },\r\n\"deduplicator\":{\"name\":\"org.tidepool.deduplicator.device.deactivate.hash\"\r\n}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/dataservices/v1/users/{{userId}}/datasets",
							"host": [
								"{{api}}"
							],
							"path": [
								"dataservices",
								"v1",
								"users",
								"{{userId}}",
								"datasets"
							]
						},
						"description": "Open a continuous upload session"
					},
					"response": []
				},
				{
					"name": "Upload Libre data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"time\":\"2020-12-05T18:06:17.000Z\",\n        \"timezoneOffset\":-300,\n        \"clockDriftOffset\":0,\n        \"conversionOffset\":0,\n        \"deviceTime\":\"2020-12-05T13:06:17\",\n        \"deviceId\":\"AbbottFreeStyleLibre-JNGZ162-T0111\",\n        \"type\":\"smbg\",\n        \"value\":85,\n        \"units\":\"mg/dL\",\n        \"subType\":\"scanned\",\n        \"payload\":{\n            \"logIndices\":[23026]\n        }\n    },\n    {\n        \"time\":\"2020-12-02T23:59:57.000Z\",\n        \"timezoneOffset\":-240,\n        \"clockDriftOffset\":-578000,\n        \"conversionOffset\":0,\n        \"deviceTime\":\"2020-12-02T19:59:57\",\n        \"deviceId\":\"AbbottFreeStyleLibre-JNGZ162-T0111\",\n        \"type\":\"cbg\",\n        \"value\":79,\n        \"units\":\"mg/dL\",\n        \"payload\":{\n            \"logIndices\":[20965]\n            }\n        }\n]"
						},
						"url": {
							"raw": "{{api}}/dataservices/v1/datasets/{{uploadSessionId}}/data",
							"host": [
								"{{api}}"
							],
							"path": [
								"dataservices",
								"v1",
								"datasets",
								"{{uploadSessionId}}",
								"data"
							]
						},
						"description": "uploading smbg, cbg and bolus data"
					},
					"response": []
				},
				{
					"name": "Close upload session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"datasetSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"dataState\":\"closed\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/dataservices/v1/datasets/{{uploadSessionId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"dataservices",
								"v1",
								"datasets",
								"{{uploadSessionId}}"
							]
						},
						"description": "Setting up Name and birthdate (18 years old) for the new user."
					},
					"response": []
				},
				{
					"name": "get the last upload session data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"pm.test(\"correct type and corresponding value returned\", function () {",
									"    switch(jsonData[0].type){",
									"        case \"cbg\": ",
									"            pm.expect(jsonData[0].value).to.eql(4.38509);",
									"            break;",
									"        case \"smbg\":",
									"            pm.expect(jsonData[0].value).to.eql(4.71814);",
									"            break;",
									"        default:",
									"            console.log(\"incorrect data type returned\")",
									"",
									"    }",
									"});",
									"pm.test(\"correct type and corresponding value returned\", function () {",
									"    switch(jsonData[1].type){",
									"        case \"cbg\": ",
									"            pm.expect(jsonData[1].value).to.eql(4.38509);",
									"            break;",
									"        case \"smbg\":",
									"            pm.expect(jsonData[1].value).to.eql(4.71814);",
									"            break;",
									"        default:",
									"            console.log(\"incorrect data type returned\")",
									"",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?uploadId={{uploadSessionId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "uploadId",
									"value": "{{uploadSessionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(204, 2000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\":\"{{signupPw}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "A normal upload session is used for “bulk” uploads.\r\n\r\nAn example of this is the Tidepool Uploader: When you use Tidepool Uploader, you are connecting a device to your computer, and using the Tidepool Uploader to read a large set of historical data from the device. Tidepool Uploader will create a normal upload session, and close that session when all data for that diabetes device has been uploaded.\r\n\r\nSubsequent uploads for the same device will create a new normal upload session, and this data will be deduplicated against any previous sessions.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const moment = require('moment');",
							"let currentTimestamp = Date.now();",
							"pm.variables.set(\"currentDate\", moment().format());",
							"pm.variables.set('currentTimestamp', currentTimestamp);",
							"pm.variables.set(\"guid\", pm.variables.replaceIn('{{$guid}}'));",
							"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
							"pm.variables.set(\"blobId\", pm.variables.replaceIn('{{$randomUUID}}').replace(/-/g, ''));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Continous upload with platform data (mobile)",
			"item": [
				{
					"name": "DSA sign-up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));",
									"let newUserEmailAddress = pm.variables.get('newUserEmailAddress');",
									"pm.variables.set('newUserEmailAddress', newUserEmailAddress.replace('_datetag_', Date.now() + uuid.v4().slice(0,5)));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(201, 1000, true, jsonData,\"userAccountSchema\");",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{newUserEmailAddress}}\",\"password\":\"{{signupPw}}\",\"emails\":[\"{{newUserEmailAddress}}\"],\"roles\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(200, 500, false, jsonData,\"invitedSchema\");",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial DSA profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));\r",
									"pm.variables.set(\"fullName\", pm.variables.replaceIn(\"{{$randomFullName}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{fullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name and birthdate (18 years old) for the new user."
					},
					"response": []
				},
				{
					"name": "open upload session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.variables.set(\"uploadSessionId\", jsonData.data.id);\r",
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(201, 500, false, jsonData,\"datasetSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"client\": {\r\n\t\t\t\"name\": \"org.tidepool.mobile\",\r\n\t\t\t\"version\": \"2.1.6\"\r\n\t},\r\n\t\"dataSetType\": \"continuous\",\r\n\t\"deduplicator\": {\r\n\t\t\"name\": \"org.tidepool.deduplicator.dataset.delete.origin\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}/datasets",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}",
								"datasets"
							]
						},
						"description": "Open a continuous upload session"
					},
					"response": []
				},
				{
					"name": "retrieve existing continous session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"uploadSessionSchema\");\r",
									"pm.test(\"Upload session retrieved is the same one we created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.variables.get(\"uploadSessionId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}/data_sets",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}",
								"data_sets"
							]
						},
						"description": "retrieve the ID of the continuous upload session created"
					},
					"response": []
				},
				{
					"name": "upload healthkit data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$guid}}\").replace(/-/g, ''));\r",
									"const moment = require('moment');\r",
									"let now = moment();\r",
									"pm.variables.set(\"uploadTime\", now.format());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 500, false, null,'');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"cbg\",\r\n\t\"value\": 16.04166,\r\n\t\"units\": \"mmol/L\",\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"41RQLJ 8332825\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n\t\t\"com.loudnate.GlucoseKit.HKMetadataKey.GlucoseIsDisplayOnly\": 0,\r\n        \"device\": {\r\n\t\t\t\"manufacturer\": \"Dexcom\",\r\n\t\t\t\"model\": \"G5 Mobile\",\r\n\t\t\t\"name\": \"CGMBLEKit\",\r\n\t\t\t\"softwareVersion\": \"20.0\",\r\n\t\t\t\"udiDeviceIdentifier\": \"00386270000002\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"basal\",\r\n    \"deliveryType\": \"temp\",\r\n    \"duration\": 300000,\r\n\t\"rate\": 6,\r\n    \"surpressed\": {\r\n        \"deliveryType\": \"scheduled\",\r\n        \"rate\": 1.4,\r\n        \"type\": \"basal\"\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"16011cc3174513\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"HasLoopKitOrigin\": 1,\r\n\t\t\"HKInsulinDeliveryReason\": 1,\r\n        \"com.loopkit.InsulinKit.MetadataKeyScheduledBasalRate\": \"1.4 IU/hr\",\r\n        \"device\": {\r\n\t\t\t\"firmwareVersion\": \"subg_rfspy 2.2\",\r\n\t\t\t\t\"localIdentifier\": \"979142\",\r\n\t\t\t\t\"manufacturer\": \"Medtronic\",\r\n\t\t\t\t\"model\": \"754\",\r\n\t\t\t\t\"name\": \"Testing\",\r\n\t\t\t\t\"softwareVersion\": \"44.0\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},{\r\n\t\"time\": \"{{uploadTime}}\",\r\n\t\"deviceId\": \"MMT-1711:12345678\",\r\n\t\"type\": \"bolus\",\r\n    \"subType\": \"normal\",\r\n    \"normal\": 2,\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"0100500050003c0035e7564513\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"HasLoopKitOrigin\": 1,\r\n\t\t\"HKInsulinDeliveryReason\": 2,\r\n        \"device\": {\r\n\t\t\t\"firmwareVersion\": \"subg_rfspy 2.2\",\r\n\t\t\t\t\"localIdentifier\": \"979142\",\r\n\t\t\t\t\"manufacturer\": \"Medtronic\",\r\n\t\t\t\t\"model\": \"754\",\r\n\t\t\t\t\"name\": \"Testing\",\r\n\t\t\t\t\"softwareVersion\": \"44.0\"\r\n\t\t},\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},{\r\n\t\"time\": \"{{uploadTime}}\",\r\n    \"name\": \"\\ud83e\\udd67\",\r\n\t\"type\": \"food\",\r\n    \"nutrition\": {\r\n        \"carbohydrate\": {\r\n            \"net\": 30,\r\n            \"units\": \"grams\"\r\n        }\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n\t\t\"HKMetadataKeySyncIdentifier\": \"35C3AE35-142B-4FF0-8B2E-784066849A50\",\r\n\t\t\"HKMetadataKeySyncVersion\": 1,\r\n        \"com.loudnate.CarbKit.HKMetadataKey.AbsorptionTimeMinutes\": 7200,\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.E53PUHPBVX.loopkit.Loop\",\r\n\t\t\t\t\"name\": \"Loop\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"56\"\r\n\t\t}\r\n\t}\r\n},\r\n{\r\n\t\"time\": \"{{uploadTime}}\",\r\n    \"name\": \"Traditional Strength Training\",\r\n\t\"type\": \"physicalActivity\",\r\n    \"duration\": {\r\n        \"units\": \"seconds\",\r\n        \"value\": 518\r\n    },\r\n    \"energy\": {\r\n        \"units\": \"kilocalories\",\r\n        \"value\": 23\r\n    },\r\n\t\"origin\": {\r\n\t\t\"id\": \"{{itemId}}\",\r\n\t\t\"name\": \"com.apple.HealthKit\",\r\n\t\t\"type\": \"service\"\r\n\t},\r\n\t\"payload\": {\r\n        \"Workout Name\": \"Quick Abs\",\r\n\t\t\"sourceRevision\": {\r\n\t\t\t\"operatingSystemVersion\": \"12.1.0\",\r\n\t\t\t\"productType\": \"iPhone9,3\",\r\n\t\t\t\"source\": {\r\n\t\t\t\t\"bundleIdentifier\": \"com.oneothergame.7min-fitness\",\r\n\t\t\t\t\"name\": \"Workout for Women\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"3.5.0.1\"\r\n\t\t}\r\n\t}\r\n}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/dataservices/v1/datasets/{{uploadSessionId}}/data",
							"host": [
								"{{api}}"
							],
							"path": [
								"dataservices",
								"v1",
								"datasets",
								"{{uploadSessionId}}",
								"data"
							]
						},
						"description": "Upload ios healthkit data to the continous upload session opened in the previous request"
					},
					"response": []
				},
				{
					"name": "Retrieve last cbg healthkit data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgHKSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit cgm data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus healthkit data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusHKSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last basal healthkit data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"basalHKSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=basal",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "basal"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last food data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"foodHKSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=food",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "food"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit nutrition data."
					},
					"response": []
				},
				{
					"name": "Retrieve last physical activity data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 500, false, jsonData,\"activityHKSchema\");\r",
									"pm.test(\"the returned item is the same that we uploaded\", function () {\r",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadSessionId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=physicalActivity",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "physicalActivity"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload healthkit activity data."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(204, 2000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\":\"{{signupPw}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This series of tests is designed to test the continous upload workflow, which simulates how our users upload with Tidepool mobile.",
			"event": []
		},
		{
			"name": "Upload with jellyfish",
			"item": [
				{
					"name": "DSA sign-up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));",
									"let newUserEmailAddress = pm.variables.get('newUserEmailAddress');",
									"pm.variables.set('newUserEmailAddress', newUserEmailAddress.replace('_datetag_', Date.now() + uuid.v4().slice(0,5)));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(201, 1000, true, jsonData,\"userAccountSchema\");",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{newUserEmailAddress}}\",\"password\":\"{{signupPw}}\",\"emails\":[\"{{newUserEmailAddress}}\"],\"roles\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(200, 500, false, jsonData,\"invitedSchema\");",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial DSA profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));\r",
									"pm.variables.set(\"fullName\", pm.variables.replaceIn(\"{{$randomFullName}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{fullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name and birthdate (18 years old) for the new user."
					},
					"response": []
				},
				{
					"name": "upload device data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"uploadId\", pm.variables.replaceIn('{{$guid}}').replace(/-/g, '').slice(0,12));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"pump-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"normal\": 2.47,\n    \"payload\": {\n        \"logIndices\": [\n            2\n        ]\n    },\n    \"subType\": \"normal\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": -300,\n    \"type\": \"bolus\",\n    \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"pump-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"payload\": {\n        \"logIndices\": [\n            1\n        ],\n        \"type\": [\n            \"Five Minute Reading (FMR)\"\n        ]\n    },\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": -300,\n    \"type\": \"cbg\",\n    \"units\": \"mmol/L\",\n    \"uploadId\": \"{{uploadId}}\",\n    \"value\": 8.437136946389211\n    }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						},
						"description": "uploading smbg, cbg and bolus data"
					},
					"response": []
				},
				{
					"name": "Retrieve last SMBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload meter data."
					},
					"response": []
				},
				{
					"name": "Retrieve last CBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"    pm.expect(jsonData[0].uploadId).to.eql(pm.variables.get(\"uploadId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(204, 2000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\":\"{{signupPw}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const moment = require('moment');",
							"let currentTimestamp = Date.now();",
							"let sharingEmailAddress = pm.variables.get('sharingEmailAddress');",
							"pm.variables.set('sharingEmailAddress', sharingEmailAddress.replace('_datetag_', currentTimestamp));",
							"pm.variables.set(\"currentDate\", moment().format());",
							"pm.variables.set('currentTimestamp', currentTimestamp);",
							"pm.variables.set(\"guid\", pm.variables.replaceIn('{{$guid}}'));",
							"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));"
						]
					}
				},
		},
		{
			"name": "Clinician and custodial user interaction",
			"item": [
				{
					"name": "login to tidepool - data owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "logging into tidepool with an existing data storage account"
					},
					"response": []
				},
				{
					"name": "get the logged in users account information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the logged in users profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clincian login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicianPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicianEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the clinician account information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve clinician profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Create custodial user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"custodialUserId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"custodialEmail\", jsonData.emails[0]);",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, jsonData,\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let newCustodialEmailAddress = pm.variables.get('newCustodialEmailAddress');\r",
									"pm.variables.set('newCustodialEmailAddress', newCustodialEmailAddress.replace('_datetag_', Date.now()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"emails\": [\"{{newCustodialEmailAddress}}\"], \"username\": \"{{newCustodialEmailAddress}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user/{{userId}}/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user",
								"{{userId}}",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clinician login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicianPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicianEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create custodial profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"profileSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"custodialBirthdate\", jsonData.patient.birthday);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\": \"{{birthdate}}\", \"email\": \"{{custodialEmail}}\", \"mrn\":\"{{$randomInt}}\"}, \"emails\":[\"{{custodialEmail}}\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{custodialUserId}}",
								"profile"
							]
						},
						"description": "Setting up Name, clinician name, role and telephone number."
					},
					"response": []
				},
				{
					"name": "Upload device data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"uploadId\", pm.variables.replaceIn('{{$guid}}').replace(/-/g, '').slice(0,12));\r",
									"pm.variables.set(\"itemId\", pm.variables.replaceIn('{{$randomUUID}}').replace(/-/g, ''));\r",
									"pm.variables.set(\"guid\", pm.variables.replaceIn('{{$guid}}'));\r",
									"pm.variables.set(\"smbgValue\", 11.331314156239124);\r",
									"pm.variables.set(\"bolusValue\", 2.47);\r",
									"pm.variables.set(\"cbgValue\", 8.437136946389211);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentTimestamp}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentTimestamp}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentTimestamp}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							]
						},
						"description": "uploading smbg, cbg and bolus data"
					},
					"response": []
				},
				{
					"name": "Retrieve all cbg data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"CBG data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let cbgValue = pm.variables.get(\"cbgValue\");",
									"    let testPassed = false;",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"cbg\") {",
									"            pm.expect(jsonData[i].value).to.eql(cbgValue);",
									"            return testPassed = true;",
									"            }",
									"        }",
									"         if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve all smbg data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"SMBG data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let smbgValue = pm.variables.get(\"smbgValue\");",
									"    let testPassed = false;",
									"    console.log(uploadId)",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"smbg\") {",
									"            pm.expect(jsonData[i].value).to.eql(smbgValue);",
									"            return testPassed = true;",
									"            }",
									"        } ",
									"        if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve all bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Bolus data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let bolusValue = pm.variables.get(\"bolusValue\");",
									"    let testPassed = false;",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"bolus\") {",
									"            pm.expect(jsonData[i].normal).to.eql(bolusValue);",
									"            return testPassed = true;",
									"            }",
									"        }",
									"         if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Create note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"addMessageSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"messageId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"messageGUI\", pm.variables.replaceIn('{{$guid}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{currentTimestamp}}\",\n        \"messagetext\": \"Increasing nighttime basal rate\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{custodialUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"getMessageSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send custodial claim account email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{custodialUserId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Resend custodial claim account email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/resend/signup/{{custodialEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"resend",
								"signup",
								"{{custodialEmail}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"let jsonData = pm.response.json();",
									"assert.common(200, 500, false, jsonData, \"invitedSchema\");",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{custodialUserId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Custodial user confirms email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.get(\"custodialBirthdate\");\r",
									"pm.variables.set(\"custodialPassword\", pm.variables.replaceIn('{{$randomPassword}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"birthday\": \"{{custodialBirthdate}}\",\"password\":\"{{custodialPassword}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Custodial login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.get(\"custodialEmail\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{custodialPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{custodialEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept terms Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(204, 2000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\":\"{{custodialPassword}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{custodialUserId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Clinician adds new custodial patient, uploads data, and creates notes. Custodial patient claims account.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const moment = require('moment');",
							"let newCustodialEmailAddress = pm.variables.get('newCustodialEmailAddress');",
							"pm.variables.set('newCustodialEmailAddress', newCustodialEmailAddress.replace('_datetag_', Date.now()));",
							"let newMoment = moment().subtract(18, 'years');",
							"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));",
							"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", moment().format('YYYY-MM-DDThh:mm:ss'));",
							"pm.variables.set(\"currentTimestamp\", moment().format());"
						]
					}
				},
		},
		{
			"name": "Data owner and clinician user interaction",
			"item": [
				{
					"name": "DSA login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload device data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"uploadId\", pm.variables.replaceIn('{{$guid}}').replace(/-/g, '').slice(0,12));\r",
									"pm.variables.set(\"itemId\", pm.variables.replaceIn('{{$randomUUID}}').replace(/-/g, ''));\r",
									"pm.variables.set(\"guid\", pm.variables.replaceIn('{{$guid}}'));\r",
									"pm.variables.set(\"smbgValue\", 11.331314156239124);\r",
									"pm.variables.set(\"bolusValue\", 2.47);\r",
									"pm.variables.set(\"cbgValue\", 8.437136946389211);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentTimestamp}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentTimestamp}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentTimestamp}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						},
						"description": "uploading smbg, cbg and bolus data"
					},
					"response": []
				},
				{
					"name": "Retrieve all cbg data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"CBG data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let cbgValue = pm.variables.get(\"cbgValue\");",
									"    let testPassed = false;",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"cbg\") {",
									"            pm.expect(jsonData[i].value).to.eql(cbgValue);",
									"            return testPassed = true;",
									"            }",
									"        }",
									"         if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve all smbg data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"SMBG data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let smbgValue = pm.variables.get(\"smbgValue\");",
									"    let testPassed = false;",
									"    console.log(uploadId)",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"smbg\") {",
									"            pm.expect(jsonData[i].value).to.eql(smbgValue);",
									"            return testPassed = true;",
									"            }",
									"        } ",
									"        if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve all bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Bolus data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let bolusValue = pm.variables.get(\"bolusValue\");",
									"    let testPassed = false;",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"bolus\") {",
									"            pm.expect(jsonData[i].normal).to.eql(bolusValue);",
									"            return testPassed = true;",
									"            }",
									"        }",
									"         if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Create note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"addMessageSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"messageId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"messageGUI\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"noteCreationTime\", now.format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Forgot to Bolus for Meal\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"getMessageSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite clinician to see data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1900, false, pm.response.json(),\"inviteSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"inviteKey\", jsonData.key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{clinicianEmail}}\",\n  \"permissions\": {\n    \"view\": {},\n    \"note\":{},\n    \"upload\":{}\n  }\n}"
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clincian login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"clinicianUserId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicianPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicianEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"key\":\"{{inviteKey}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/accept/invite/{{clinicianUserId}}/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"invite",
								"{{clinicianUserId}}",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the clinician account information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve patient profile as clinician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"profileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve all cbg data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"CBG data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let cbgValue = pm.variables.get(\"cbgValue\");",
									"    let testPassed = false;",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"cbg\") {",
									"            pm.expect(jsonData[i].value).to.eql(cbgValue);",
									"            return testPassed = true;",
									"            }",
									"        }",
									"         if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve all smbg data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"SMBG data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let smbgValue = pm.variables.get(\"smbgValue\");",
									"    let testPassed = false;",
									"    console.log(uploadId)",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"smbg\") {",
									"            pm.expect(jsonData[i].value).to.eql(smbgValue);",
									"            return testPassed = true;",
									"            }",
									"        } ",
									"        if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve all bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"",
									"pm.test(\"Schema is valid for data types returned\", function () {",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(tv4.validate(jsonData[i], `${jsonData[i].type}Schema`)).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Bolus data just uploaded is returned\", function () {",
									"    let uploadId = pm.variables.get(\"uploadId\");",
									"    let bolusValue = pm.variables.get(\"bolusValue\");",
									"    let testPassed = false;",
									"    for(let i = 0; i < jsonData.length; i++) {",
									"        if (jsonData[i].uploadId === uploadId && jsonData[i].type === \"bolus\") {",
									"            pm.expect(jsonData[i].normal).to.eql(bolusValue);",
									"            return testPassed = true;",
									"            }",
									"        }",
									"         if (!testPassed) {",
									"        pm.expect.fail(\"Data uploaded was not returned\")",
									"         }",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"getMessageSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment on note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"addMessageSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"messageGUI\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"noteCreationTime\", now.format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"parentmessage\": \"{{messageId}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\": \"{{clinicUserId}}\",\n        \"messagetext\": \"Clinician comment\",\n        \"timestamp\": \"{{noteCreationTime}}\",\n        \"guid\": \"{{messageGUI}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/reply/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"reply",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "DSA login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							],
							"query": [
								{
									"key": "x-tidepool-session-token",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove clinician from share",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/access/{{userId}}/{{clinicianUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"access",
								"{{userId}}",
								"{{clinicianUserId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset clinician invitation status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"key\":\"{{inviteKey}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{clinicianEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{clinicianEmail}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "DSA that uploads data to their Tidepool Account, adds notes and shares data with their clinician in preparation for a clinic appointment.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const moment = require('moment');",
							"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", moment().format('YYYY-MM-DDThh:mm:ss'));",
							"pm.variables.set(\"currentTimestamp\", moment().format());"
						]
					}
				},
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "User actions with invalid token",
					"item": [
						{
							"name": "DSA login - create invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.variables.replaceIn('{{$randomUUID}}'));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{loginPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{loginEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a users account information - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 300, false, pm.response.json(),\"errorSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a users profile information - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload device data - invalid token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"guid\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"const moment = require('moment');",
											"pm.variables.set(\"currentDate\", moment().format());",
											"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
											"pm.variables.set(\"uploadId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, '').slice(0,12));",
											"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, ''));",
											"pm.variables.set(\"smbgValue\", 11.331314156239124);",
											"pm.variables.set(\"bolusValue\", 2.47);",
											"pm.variables.set(\"cbgValue\", 8.437136946389211);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						}
					],
					"description": "Sending requests for profile information and attempting to upload data with an invalid token",
					"event": []
				},
				{
					"name": "User actions with incorrect token",
					"item": [
						{
							"name": "DSA login - get incorrect token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.variables.replaceIn('{{$randomUUID}}'));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clinicianEmail}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clinicianPw}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a users account information - incorrect token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 300, false, pm.response.json(),\"errorSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a users profile information - incorrect token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload device data - incorrect token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"guid\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"const moment = require('moment');",
											"pm.variables.set(\"currentDate\", moment().format());",
											"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
											"pm.variables.set(\"uploadId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, '').slice(0,12));",
											"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, ''));",
											"pm.variables.set(\"smbgValue\", 11.331314156239124);",
											"pm.variables.set(\"bolusValue\", 2.47);",
											"pm.variables.set(\"cbgValue\", 8.437136946389211);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						}
					],
					"description": "Attempting to get user profile information and upload data with an incorrect token (another user's token)",
					"event": []
				},
				{
					"name": "User actions with no token",
					"item": [
						{
							"name": "DSA login - set empty token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", \"\");",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clinicianEmail}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clinicianPw}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a users account information - empty token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 300, false, pm.response.json(),\"errorSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a users profile information - empty token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload device data - empty token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"guid\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"const moment = require('moment');",
											"pm.variables.set(\"currentDate\", moment().format());",
											"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
											"pm.variables.set(\"uploadId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, '').slice(0,12));",
											"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, ''));",
											"pm.variables.set(\"smbgValue\", 11.331314156239124);",
											"pm.variables.set(\"bolusValue\", 2.47);",
											"pm.variables.set(\"cbgValue\", 8.437136946389211);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						}
					],
					"description": "Attempting to get user profile information and upload data with an no token",
					"event": []
				},
				{
					"name": "User actions with expired token",
					"item": [
						{
							"name": "DSA login - get valid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userAccountSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clinicianEmail}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clinicianPw}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of tidepool - expire token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a users account information - expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 300, false, pm.response.json(),\"errorSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a users profile information - expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload device data - expired token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"guid\", pm.variables.replaceIn(\"{{$guid}}\"));",
											"const moment = require('moment');",
											"pm.variables.set(\"currentDate\", moment().format());",
											"pm.variables.set(\"currentDateWithoutOffset\", moment().format('YYYY-MM-DDThh:mm:ss'));",
											"pm.variables.set(\"uploadId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, '').slice(0,12));",
											"pm.variables.set(\"itemId\", pm.variables.replaceIn(\"{{$randomUUID}}\").replace(/-/g, ''));",
											"pm.variables.set(\"smbgValue\", 11.331314156239124);",
											"pm.variables.set(\"bolusValue\", 2.47);",
											"pm.variables.set(\"cbgValue\", 8.437136946389211);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(401, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mmol/L\",\n    \"value\": {{smbgValue}},\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n    \"guid\": \"{{guid}}\",\n    \"id\": \"{{itemId}}\",\n    \"time\": \"{{currentDate}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"normal\": {{bolusValue}},\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{currentDateWithoutOffset}}\",\n        \"guid\": \"{{guid}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{currentDate}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": {{cbgValue}}\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						}
					],
					"description": "Attempting to get user profile information and upload data with an expired token",
					"event": []
				}
			],
			"description": "These tests execute the unhappy path by submitting incorrect or missing information",
			"event": []
		},
		{
			"name": "Status Checks",
			"item": [
				{
					"name": "auth status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "confirm status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/confirm/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "data status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/data/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "dataservices status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/dataservices/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"dataservices",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "export status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/export/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"export",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "metrics status check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(200, 300, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/metrics/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"metrics",
								"status"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const userAccountSchema = {",
					"  required: ['emailVerified'],",
					"  properties: {",
					"    createdTime: {",
					"      type: 'string'",
					"    },",
					"    deletedTime: {",
					"      type: 'string'",
					"    },",
					"    emailVerified: {",
					"      type: 'boolean'",
					"    },",
					"    emails: {",
					"      type: 'array',",
					"      items: [{",
					"        type: 'string',",
					"      }, ],",
					"    },",
					"    modifiedTime: {",
					"      type: 'string'",
					"    },",
					"    roles: {",
					"      type: 'array',",
					"      items: [{",
					"        type: 'string',",
					"      }, ],",
					"    },",
					"    termsAccepted: {",
					"      type: 'string'",
					"    },",
					"    userid: {",
					"      type: 'string'",
					"    },",
					"    username: {",
					"      type: 'string'",
					"    },",
					"  },",
					"}",
					"const inviteSchema = {",
					"  type: 'object',",
					"  required: ['created', 'creatorId', 'email', 'key', 'type'],",
					"  properties: {",
					"    created: {",
					"      type: 'string'",
					"    },",
					"    creatorId: {",
					"      type: 'string'",
					"    },",
					"    context: {",
					"      type: ['object', 'null'],",
					"      properties: {",
					"        note: {",
					"          type: 'object'",
					"        },",
					"        upload: {",
					"          type: 'object'",
					"        },",
					"        view: {",
					"          type: 'object'",
					"        },",
					"      }",
					"    },",
					"    email: {",
					"      type: 'string'",
					"    },",
					"    key: {",
					"      type: 'string'",
					"    },",
					"    type: {",
					"      type: 'string'",
					"    },",
					"    status: {",
					"      type: 'string'",
					"    },",
					"    creator: {",
					"      type: 'object',",
					"      required: ['userid', 'profile'],",
					"      propeties: {",
					"        userid: {",
					"          type: 'string'",
					"        },",
					"        profile: {",
					"          type: ['object', 'null'],",
					"          required: ['fullName', 'patient'],",
					"          properties: {",
					"            fullName: {",
					"              type: 'string'",
					"            },",
					"            patient: {",
					"              type: 'object',",
					"              properties: {",
					"                birthday: {",
					"                  type: 'string'",
					"                },",
					"                diagnosisDate: {",
					"                  type: 'string'",
					"                },",
					"                isOtherPerson: {",
					"                  type: 'string'",
					"                },",
					"                fullName: {",
					"                  type: 'string'",
					"                },",
					"              },",
					"            },",
					"          },",
					"        },",
					"      },",
					"    },",
					"  },",
					"}",
					"const invitedSchema = {",
					"  type: 'array',",
					"  items: [{",
					"    type: 'object',",
					"    required: ['created', 'creatorId', 'email', 'key', 'type'],",
					"    properties: {",
					"      created: {",
					"        type: 'string'",
					"      },",
					"      creatorId: {",
					"        type: 'string'",
					"      },",
					"      context: {",
					"        type: ['object', 'null'],",
					"        properties: {",
					"          note: {",
					"            type: 'object'",
					"          },",
					"          upload: {",
					"            type: 'object'",
					"          },",
					"          view: {",
					"            type: 'object'",
					"          },",
					"        }",
					"      },",
					"      email: {",
					"        type: 'string'",
					"      },",
					"      key: {",
					"        type: 'string'",
					"      },",
					"      type: {",
					"        type: 'string'",
					"      },",
					"      status: {",
					"        type: 'string'",
					"      },",
					"      creator: {",
					"        type: 'object',",
					"        required: ['userid', 'profile'],",
					"        propeties: {",
					"          userid: {",
					"            type: 'string'",
					"          },",
					"          profile: {",
					"            type: ['object', 'null'],",
					"            required: ['fullName', 'patient'],",
					"            properties: {",
					"              fullName: {",
					"                type: 'string'",
					"              },",
					"              patient: {",
					"                type: 'object',",
					"                properties: {",
					"                  birthday: {",
					"                    type: 'string'",
					"                  },",
					"                  diagnosisDate: {",
					"                    type: 'string'",
					"                  },",
					"                  isOtherPerson: {",
					"                    type: 'string'",
					"                  },",
					"                  fullName: {",
					"                    type: 'string'",
					"                  },",
					"                },",
					"              },",
					"            },",
					"          },",
					"        },",
					"      },",
					"    },",
					"  }, ],",
					"}",
					"const profileSchema = {",
					"  required: ['fullName'],",
					"  properties: {",
					"    fullName: {",
					"      type: 'string'",
					"    },",
					"    clinic: {",
					"      type: 'object',",
					"      required: ['role', 'name'],",
					"      properties: {",
					"        role: {",
					"          type: 'string'",
					"        },",
					"        name: {",
					"          type: 'string'",
					"        },",
					"        telephone: {",
					"          type: 'string'",
					"        },",
					"      },",
					"    },",
					"    patient: {",
					"      type: 'object',",
					"      required: ['birthday'],",
					"      properties: {",
					"        about: {",
					"          type: 'string'",
					"        },",
					"        birthday: {",
					"          type: 'string'",
					"        },",
					"        diagnosisDate: {",
					"          type: 'string'",
					"        },",
					"        diagnosisType: {",
					"          type: 'string'",
					"        },",
					"        mrn: {",
					"          type: 'string'",
					"        },",
					"        targetDevices: {",
					"          type: 'array',",
					"          items: [{",
					"            type: 'string'",
					"          }]",
					"        },",
					"        targetTimezone: {",
					"          type: 'string'",
					"        },",
					"      }",
					"    }",
					"  }",
					"}",
					"const settingsSchema = {",
					"  type: 'object',",
					"  properties: {",
					"    bgTarget: {",
					"      type: 'object',",
					"      properties: {",
					"        low: {",
					"          type: 'number'",
					"        },",
					"        high: {",
					"          type: 'number'",
					"        },",
					"      }",
					"    },",
					"    units: {",
					"      type: 'object',",
					"      properties: {",
					"        bg: {",
					"          type: 'string'",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"const datasetSchema = {",
					"  type: 'object',",
					"  properties: {",
					"    data: {",
					"      type: 'object',",
					"      properties: {",
					"        client: {",
					"          type: 'object',",
					"          properties: {",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            private: {",
					"              type: 'object',",
					"              properties: {",
					"                blobId: {",
					"                  type: 'string'",
					"                },",
					"                os: {",
					"                  type: 'string'",
					"                }",
					"              }",
					"            },",
					"            version: {",
					"              type: 'string'",
					"            }",
					"          }",
					"        },",
					"        computerTime: {",
					"          type: 'string'",
					"        },",
					"        conversionOffset: {",
					"          type: 'integer'",
					"        },",
					"        createdTime: {",
					"          type: 'string'",
					"        },",
					"        dataSetType: {",
					"          type: 'string'",
					"        },",
					"        deduplicator: {",
					"          type: 'object',",
					"          properties: {",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            version: {",
					"              type: 'string'",
					"            }",
					"          }",
					"        },",
					"        deviceId: {",
					"          type: 'string'",
					"        },",
					"        deviceManufacturers: {",
					"          type: 'array',",
					"          items: [{",
					"            type: 'string'",
					"          }]",
					"        },",
					"        deviceModel: {",
					"          type: 'string'",
					"        },",
					"        deviceSerialNumber: {",
					"          type: 'string'",
					"        },",
					"        deviceTags: {",
					"          type: 'array',",
					"          items: [{",
					"              type: 'string',",
					"            },",
					"            {",
					"              type: 'string',",
					"            },",
					"            {",
					"              type: 'string',",
					"            }",
					"          ]",
					"        },",
					"        deviceTime: {",
					"          type: 'string'",
					"        },",
					"        id: {",
					"          type: 'string'",
					"        },",
					"        modifiedTime: {",
					"          type: 'string'",
					"        },",
					"        time: {",
					"          type: 'string'",
					"        },",
					"        timeProcessing: {",
					"          type: 'string'",
					"        },",
					"        timezone: {",
					"          type: 'string'",
					"        },",
					"        timezoneOffset: {",
					"          type: 'integer'",
					"        },",
					"        type: {",
					"          type: 'string'",
					"        },",
					"        uploadId: {",
					"          type: 'string'",
					"        },",
					"        version: {",
					"          type: 'string'",
					"        }",
					"      }",
					"    },",
					"    meta: {",
					"      type: 'object',",
					"      properties: {",
					"        trace: {",
					"          type: 'object',",
					"          properties: {",
					"            request: {",
					"              type: 'string'",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"const uploadSessionSchema = {",
					"  type: 'array',",
					"  items: {",
					"    anyOf: [{",
					"      type: 'object',",
					"      default: {},",
					"      required: [",
					"        'client',",
					"        'createdTime',",
					"        'dataSetType',",
					"        'deduplicator',",
					"        'id',",
					"        'modifiedTime',",
					"        'type',",
					"        'uploadId',",
					"      ],",
					"      properties: {",
					"        client: {",
					"          type: 'object',",
					"          required: ['name', 'version'],",
					"          properties: {",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            version: {",
					"              type: 'string'",
					"            },",
					"          },",
					"        },",
					"        createdTime: {",
					"          type: 'string'",
					"        },",
					"        dataSetType: {",
					"          type: 'string'",
					"        },",
					"        deduplicator: {",
					"          type: 'object',",
					"          required: ['name', 'version'],",
					"          properties: {",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            version: {",
					"              type: 'string'",
					"            },",
					"          },",
					"        },",
					"        id: {",
					"          type: 'string'",
					"        },",
					"        modifiedTime: {",
					"          type: 'string'",
					"        },",
					"        type: {",
					"          type: 'string'",
					"        },",
					"        uploadId: {",
					"          type: 'string'",
					"        },",
					"      },",
					"    }, ],",
					"  },",
					"}",
					"const smbgSchema = {",
					"  type: 'array',",
					"  items: {",
					"    required: [",
					"      'clockDriftOffset',",
					"      'deviceId',",
					"      'deviceTime',",
					"      'guid',",
					"      'id',",
					"      'subType',",
					"      'time',",
					"      'type',",
					"      'units',",
					"      'uploadId',",
					"      'value',",
					"    ],",
					"    properties: {",
					"      clockDriftOffset: {",
					"        type: 'integer'",
					"      },",
					"      conversionOffset: {",
					"        type: 'integer'",
					"      },",
					"      deviceId: {",
					"        type: 'string'",
					"      },",
					"      deviceTime: {",
					"        type: 'string'",
					"      },",
					"      guid: {",
					"        type: 'string'",
					"      },",
					"      id: {",
					"        type: 'string'",
					"      },",
					"      subType: {",
					"        type: 'string'",
					"      },",
					"      time: {",
					"        type: 'string'",
					"      },",
					"      type: {",
					"        type: 'string'",
					"      },",
					"      units: {",
					"        type: 'string'",
					"      },",
					"      uploadId: {",
					"        type: 'string'",
					"      },",
					"      value: {",
					"        type: 'number'",
					"      },",
					"    },",
					"  },",
					"}",
					"const cbgSchema = {",
					"  type: 'array',",
					"  items: {",
					"    required: [",
					"      'clockDriftOffset',",
					"      'deviceId',",
					"      'deviceTime',",
					"      'guid',",
					"      'id',",
					"      'time',",
					"      'type',",
					"      'units',",
					"      'uploadId',",
					"      'value',",
					"    ],",
					"    properties: {",
					"      clockDriftOffset: {",
					"        type: 'integer'",
					"      },",
					"      conversionOffset: {",
					"        type: 'integer'",
					"      },",
					"      deviceId: {",
					"        type: 'string'",
					"      },",
					"      deviceTime: {",
					"        type: 'string'",
					"      },",
					"      guid: {",
					"        type: 'string'",
					"      },",
					"      id: {",
					"        type: 'string'",
					"      },",
					"      time: {",
					"        type: 'string'",
					"      },",
					"      type: {",
					"        type: 'string'",
					"      },",
					"      units: {",
					"        type: 'string'",
					"      },",
					"      uploadId: {",
					"        type: 'string'",
					"      },",
					"      value: {",
					"        type: 'number'",
					"      },",
					"    },",
					"  },",
					"}",
					"const cbgHKSchema = {",
					"  type: 'array',",
					"  items: {",
					"    anyOf: [{",
					"      type: 'object',",
					"      required: [",
					"        'deviceId',",
					"        'id',",
					"        'origin',",
					"        'payload',",
					"        'time',",
					"        'type',",
					"        'units',",
					"        'uploadId',",
					"        'value',",
					"      ],",
					"      properties: {",
					"        deviceId: {",
					"          type: 'string'",
					"        },",
					"        id: {",
					"          type: 'string'",
					"        },",
					"        origin: {",
					"          type: 'object',",
					"          required: ['id', 'name', 'type'],",
					"          properties: {",
					"            id: {",
					"              type: 'string'",
					"            },",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            type: {",
					"              type: 'string'",
					"            },",
					"          },",
					"        },",
					"        payload: {",
					"          type: 'object',",
					"          required: [",
					"            'HKMetadataKeySyncIdentifier',",
					"            'device',",
					"            'sourceRevision',",
					"          ],",
					"          properties: {",
					"            HKMetadataKeySyncIdentifier: {",
					"              type: 'string'",
					"            },",
					"            device: {",
					"              type: 'object',",
					"              required: ['manufacturer', 'model'],",
					"              properties: {",
					"                manufacturer: {",
					"                  type: 'string'",
					"                },",
					"                model: {",
					"                  type: 'string'",
					"                },",
					"              },",
					"            },",
					"            sourceRevision: {",
					"              type: 'object'",
					"            },",
					"            properties: {",
					"              source: {",
					"                type: 'string'",
					"              }",
					"            },",
					"          },",
					"        },",
					"        time: {",
					"          type: 'string'",
					"        },",
					"        type: {",
					"          type: 'string'",
					"        },",
					"        units: {",
					"          type: 'string'",
					"        },",
					"        uploadId: {",
					"          type: 'string'",
					"        },",
					"        value: {",
					"          type: 'number'",
					"        },",
					"      },",
					"    }, ],",
					"  },",
					"}",
					"const bolusSchema = {",
					"  type: 'array',",
					"  items: {",
					"    required: [",
					"      'clockDriftOffset',",
					"      'deviceId',",
					"      'deviceTime',",
					"      'guid',",
					"      'id',",
					"      'subType',",
					"      'time',",
					"      'type',",
					"      'uploadId',",
					"    ],",
					"    properties: {",
					"      clockDriftOffset: {",
					"        type: 'integer'",
					"      },",
					"      conversionOffset: {",
					"        type: 'integer'",
					"      },",
					"      deviceId: {",
					"        type: 'string'",
					"      },",
					"      deviceTime: {",
					"        type: 'string'",
					"      },",
					"      guid: {",
					"        type: 'string'",
					"      },",
					"      id: {",
					"        type: 'string'",
					"      },",
					"      normal: {",
					"        type: 'number'",
					"      },",
					"      extended: {",
					"        type: 'integer'",
					"      },",
					"      expectedExtended: {",
					"        type: 'integer'",
					"      },",
					"      duration: {",
					"        type: 'integer'",
					"      },",
					"      expectedDuration: {",
					"        type: 'integer'",
					"      },",
					"      subType: {",
					"        type: 'string'",
					"      },",
					"      time: {",
					"        type: 'string'",
					"      },",
					"      type: {",
					"        type: 'string'",
					"      },",
					"      uploadId: {",
					"        type: 'string'",
					"      },",
					"    },",
					"  },",
					"}",
					"const bolusHKSchema = {",
					"  type: 'array',",
					"  items: {",
					"    anyOf: [{",
					"      type: 'object',",
					"      required: [",
					"        'deviceId',",
					"        'id',",
					"        'normal',",
					"        'origin',",
					"        'payload',",
					"        'subType',",
					"        'time',",
					"        'type',",
					"        'uploadId',",
					"      ],",
					"      properties: {",
					"        deviceId: {",
					"          type: 'string'",
					"        },",
					"        id: {",
					"          type: 'string'",
					"        },",
					"        normal: {",
					"          type: 'number'",
					"        },",
					"        origin: {",
					"          type: 'object',",
					"          required: ['id', 'name', 'type'],",
					"          properties: {",
					"            id: {",
					"              type: 'string'",
					"            },",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            type: {",
					"              type: 'string'",
					"            },",
					"          },",
					"        },",
					"        payload: {",
					"          type: 'object',",
					"          required: [",
					"            'HKInsulinDeliveryReason',",
					"            'HKMetadataKeySyncIdentifier',",
					"            'device',",
					"            'sourceRevision',",
					"          ],",
					"          properties: {",
					"            HKInsulinDeliveryReason: {",
					"              type: 'integer'",
					"            },",
					"            HKMetadataKeySyncIdentifier: {",
					"              type: 'string'",
					"            },",
					"            device: {",
					"              type: 'object',",
					"              required: ['manufacturer', 'model'],",
					"              properties: {",
					"                manufacturer: {",
					"                  type: 'string'",
					"                },",
					"                model: {",
					"                  type: 'string'",
					"                },",
					"              },",
					"            },",
					"            sourceRevision: {",
					"              type: 'object'",
					"            },",
					"            properties: {",
					"              source: {",
					"                type: 'string'",
					"              }",
					"            },",
					"          },",
					"        },",
					"        subType: {",
					"          type: 'string'",
					"        },",
					"        time: {",
					"          type: 'string'",
					"        },",
					"        type: {",
					"          type: 'string'",
					"        },",
					"        uploadId: {",
					"          type: 'string'",
					"        },",
					"      },",
					"    }, ],",
					"  },",
					"}",
					"const basalHKSchema = {",
					"  type: 'array',",
					"  items: {",
					"    anyOf: [{",
					"      type: 'object',",
					"      required: [",
					"        'deviceId',",
					"        'id',",
					"        'origin',",
					"        'payload',",
					"        'rate',",
					"        'time',",
					"        'type',",
					"        'uploadId',",
					"      ],",
					"      properties: {",
					"        deviceId: {",
					"          type: 'string'",
					"        },",
					"        id: {",
					"          type: 'string'",
					"        },",
					"        origin: {",
					"          type: 'object',",
					"          required: ['id', 'name', 'type'],",
					"          properties: {",
					"            id: {",
					"              type: 'string'",
					"            },",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            type: {",
					"              type: 'string'",
					"            },",
					"          },",
					"        },",
					"        payload: {",
					"          type: 'object',",
					"          required: [",
					"            'HKInsulinDeliveryReason',",
					"            'HKMetadataKeySyncIdentifier',",
					"            'device',",
					"            'sourceRevision',",
					"          ],",
					"          properties: {",
					"            HKInsulinDeliveryReason: {",
					"              type: 'integer'",
					"            },",
					"            HKMetadataKeySyncIdentifier: {",
					"              type: 'string'",
					"            },",
					"            device: {",
					"              type: 'object',",
					"              required: ['manufacturer', 'model'],",
					"              properties: {",
					"                manufacturer: {",
					"                  type: 'string'",
					"                },",
					"                model: {",
					"                  type: 'string'",
					"                },",
					"              },",
					"            },",
					"            sourceRevision: {",
					"              type: 'object'",
					"            },",
					"            properties: {",
					"              source: {",
					"                type: 'string'",
					"              }",
					"            },",
					"          },",
					"        },",
					"        rate: {",
					"          type: 'number'",
					"        },",
					"        time: {",
					"          type: 'string'",
					"        },",
					"        type: {",
					"          type: 'string'",
					"        },",
					"        uploadId: {",
					"          type: 'string'",
					"        },",
					"      },",
					"    }, ],",
					"  },",
					"}",
					"const foodHKSchema = {",
					"  type: 'array',",
					"  items: {",
					"    anyOf: [{",
					"      type: 'object',",
					"      required: [",
					"        'id',",
					"        'name',",
					"        'nutrition',",
					"        'origin',",
					"        'payload',",
					"        'time',",
					"        'type',",
					"        'uploadId',",
					"      ],",
					"      properties: {",
					"        id: {",
					"          type: 'string'",
					"        },",
					"        name: {",
					"          type: 'string'",
					"        },",
					"        nutrition: {",
					"          type: 'object',",
					"          required: ['carbohydrate'],",
					"          properties: {",
					"            carbohydrate: {",
					"              type: 'object',",
					"              required: ['net', 'units'],",
					"              properties: {",
					"                net: {",
					"                  type: 'number'",
					"                },",
					"                units: {",
					"                  type: 'string'",
					"                },",
					"              },",
					"            },",
					"          },",
					"        },",
					"        origin: {",
					"          type: 'object',",
					"          required: ['id', 'name', 'type'],",
					"          properties: {",
					"            id: {",
					"              type: 'string'",
					"            },",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            type: {",
					"              type: 'string'",
					"            },",
					"          },",
					"        },",
					"        payload: {",
					"          type: 'object',",
					"          required: ['HKMetadataKeySyncIdentifier', 'sourceRevision'],",
					"          properties: {",
					"            HKMetadataKeySyncIdentifier: {",
					"              type: 'string'",
					"            },",
					"            sourceRevision: {",
					"              type: 'object'",
					"            },",
					"            properties: {",
					"              source: {",
					"                type: 'string'",
					"              }",
					"            },",
					"          },",
					"        },",
					"        time: {",
					"          type: 'string'",
					"        },",
					"        type: {",
					"          type: 'string'",
					"        },",
					"        uploadId: {",
					"          type: 'string'",
					"        },",
					"      },",
					"    }, ],",
					"  },",
					"}",
					"const activityHKSchema = {",
					"  type: 'array',",
					"  items: {",
					"    anyOf: [{",
					"      type: 'object',",
					"      required: [",
					"        'duration',",
					"        'energy',",
					"        'id',",
					"        'name',",
					"        'origin',",
					"        'payload',",
					"        'time',",
					"        'type',",
					"        'uploadId',",
					"      ],",
					"      properties: {",
					"        duration: {",
					"          type: 'object',",
					"          required: ['units', 'value'],",
					"          properties: {",
					"            units: {",
					"              type: 'string'",
					"            },",
					"            value: {",
					"              type: 'number'",
					"            },",
					"          },",
					"        },",
					"        energy: {",
					"          type: 'object',",
					"          required: ['units', 'value'],",
					"          properties: {",
					"            units: {",
					"              type: 'string'",
					"            },",
					"            value: {",
					"              type: 'number'",
					"            },",
					"          },",
					"        },",
					"        id: {",
					"          type: 'string'",
					"        },",
					"        name: {",
					"          type: 'string'",
					"        },",
					"        origin: {",
					"          type: 'object',",
					"          required: ['id', 'name', 'type'],",
					"          properties: {",
					"            id: {",
					"              type: 'string'",
					"            },",
					"            name: {",
					"              type: 'string'",
					"            },",
					"            type: {",
					"              type: 'string'",
					"            },",
					"          },",
					"        },",
					"        payload: {",
					"          type: 'object',",
					"          required: ['sourceRevision'],",
					"          properties: {",
					"            sourceRevision: {",
					"              type: 'object'",
					"            },",
					"            properties: {",
					"              source: {",
					"                type: 'object',",
					"                required: ['name'],",
					"                properties: {",
					"                  name: {",
					"                    type: 'string'",
					"                  }",
					"                },",
					"              },",
					"            },",
					"          },",
					"        },",
					"        time: {",
					"          type: 'string'",
					"        },",
					"        type: {",
					"          type: 'string'",
					"        },",
					"        uploadId: {",
					"          type: 'string'",
					"        },",
					"      },",
					"    }, ],",
					"  },",
					"}",
					"const getMessageSchema = {",
					"  type: 'object',",
					"  properties: {",
					"    messages: {",
					"      type: 'array',",
					"      items: [",
					"        {",
					"          type: \"object\",",
					"          required: [",
					"              'id', ",
					"              'guid', ",
					"              'parentmessage', ",
					"              'userid', ",
					"              'groupid', ",
					"              'timestamp', ",
					"              'createdtime', ",
					"              'messagetext'",
					"              ],",
					"          properties: {",
					"            id: {",
					"              type: 'string'",
					"            },",
					"            guid: {",
					"              type: 'string'",
					"            },",
					"            parentmessage: {",
					"              type: ['null', 'string']",
					"            },",
					"            userid: {",
					"              type: 'string'",
					"            },",
					"            groupid: {",
					"              type: 'string'",
					"            },",
					"            timestamp: {",
					"              type: 'string'",
					"            },",
					"            createdtime: {",
					"              type: 'string'",
					"            },",
					"            messagetext: {",
					"              type: 'string'",
					"            },",
					"            user: {",
					"              type: 'object',",
					"              required: ['fullName'],",
					"              properties: {",
					"                fullName: {",
					"                  type: 'string'",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      ]",
					"    }",
					"  }",
					"}",
					"",
					"const addMessageSchema = {",
					"  type: 'object',",
					"  required: ['id'],",
					"  properties: {",
					"    id: {",
					"        type: 'string'",
					"    }",
					"  }",
					"}",
					"",
					"const errorSchema = {",
					"  type: 'object',",
					"  required: ['code', 'reason'],",
					"  properties: {",
					"    code: {",
					"      type: 'integer'",
					"    },",
					"    reason: {",
					"      type: 'string'",
					"    }",
					"  },",
					"}",
					"pm.globals.set('userAccountSchema', JSON.stringify(userAccountSchema))",
					"pm.globals.set('profileSchema', JSON.stringify(profileSchema))",
					"pm.globals.set('inviteSchema', JSON.stringify(inviteSchema))",
					"pm.globals.set('invitedSchema', JSON.stringify(invitedSchema))",
					"pm.globals.set('settingsSchema', JSON.stringify(settingsSchema))",
					"pm.globals.set('addMessageSchema', JSON.stringify(addMessageSchema))",
					"pm.globals.set('getMessageSchema', JSON.stringify(getMessageSchema))",
					"pm.globals.set('smbgSchema', JSON.stringify(smbgSchema))",
					"pm.globals.set('cbgHKSchema', JSON.stringify(cbgHKSchema))",
					"pm.globals.set('cbgSchema', JSON.stringify(cbgSchema))",
					"pm.globals.set('bolusSchema', JSON.stringify(bolusSchema))",
					"pm.globals.set('bolusHKSchema', JSON.stringify(bolusHKSchema))",
					"pm.globals.set('basalHKSchema', JSON.stringify(basalHKSchema))",
					"pm.globals.set('foodHKSchema', JSON.stringify(foodHKSchema))",
					"pm.globals.set('activityHKSchema', JSON.stringify(activityHKSchema))",
					"pm.globals.set('datasetSchema', JSON.stringify(datasetSchema))",
					"pm.globals.set('uploadSessionSchema', JSON.stringify(uploadSessionSchema))",
					"pm.globals.set('errorSchema', JSON.stringify(errorSchema))",
					"pm.globals.set(",
					"  'loadAsserts',",
					"  function loadAsserts() {",
					"    let asserts = {}",
					"    asserts.responseTimeMsLessThan = function responseTimeMsLessThan(ms) {",
					"      pm.test('Response time is less than ' + ms + 'ms', function() {",
					"        //pm.expect(pm.response.responseTime).to.be.below(ms);",
					"        console.log('Expected response in ms under ', ms)",
					"        console.log('Actual response time in ms ', pm.response.responseTime)",
					"      })",
					"    }",
					"    asserts.responseTypeJson = function responseTypeJson() {",
					"      pm.test('Response type is application/json', function() {",
					"        pm.expect(pm.response.headers.get('content-type')).to.include(",
					"          'application/json'",
					"        )",
					"      })",
					"    }",
					"    asserts.responseHasSessionToken = function responseHasSessionToken() {",
					"      pm.test('Response has x-tidepool-session-token', function() {",
					"        pm.response.to.have.header('x-tidepool-session-token')",
					"      })",
					"    }",
					"    asserts.responseHasNoSessionToken = function responseHasNoSessionToken() {",
					"      pm.test('Response has NO x-tidepool-session-token', function() {",
					"        pm.response.to.not.have.header('x-tidepool-session-token')",
					"      })",
					"    }",
					"    asserts.responseBodyMatchesSchema = function responseBodyMatchesSchema(",
					"      jsonData,",
					"      schemaName",
					"    ) {",
					"      pm.test('Response body matches ' + schemaName, function() {",
					"        let schema = JSON.parse(pm.globals.get(schemaName))",
					"        pm.response.to.have.jsonSchema(schema)",
					"      })",
					"    }",
					"    asserts.responseStatusCodeIs = function responseStatusCodeIs(code) {",
					"      pm.test('Response status is ' + code, function() {",
					"        pm.response.to.have.status(code)",
					"      })",
					"    }",
					"    asserts.common = function common(",
					"      expectedCode,",
					"      durationMs,",
					"      hasSessionToken,",
					"      jsonData,",
					"      schemaName",
					"    ) {",
					"      asserts.responseStatusCodeIs(expectedCode)",
					"      asserts.responseTimeMsLessThan(durationMs)",
					"      if (hasSessionToken) {",
					"        assert.responseHasSessionToken()",
					"      } else {",
					"        assert.responseHasNoSessionToken()",
					"      }",
					"      if (jsonData !== null) {",
					"        assert.responseTypeJson()",
					"        assert.responseBodyMatchesSchema(jsonData, schemaName)",
					"      }",
					"    }",
					"    return asserts",
					"  } + '; loadAsserts();'",
					")",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}