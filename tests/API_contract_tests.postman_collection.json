{
	"info": {
		"_postman_id": "ab3cf74a-1689-4cad-a82d-2efb1ccae029",
		"name": "API_contract_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Client application smoke test",
			"item": [
				{
					"name": "login to tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a262dfe5-809f-4280-bdba-9eca5c83f6a6",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the logged in users profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86cf8a1b-f36e-4644-b9dc-ca9390e8db95",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "invite another user see data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fda65e72-f852-4a5c-abe0-bc8a59741a19",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3911e8a7-cd83-4498-81a2-7cdb1d8df47c",
								"exec": [
									"const emailName = pm.environment.get(\"sharingEmailName\");",
									"let emailAddress = emailName+ \"+sharing_\" + Date.now() + \"@tidepool.org\";",
									"pm.variables.set(\"sharingEmailAddress\", emailAddress);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{sharingEmailAddress}}\",\n  \"permissions\": {\n    \"view\": {}\n  }\n}"
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a note for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64948e57-fa6c-4148-a369-180b6674ce16",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{$guid}}\",\n        \"userid\": \"{{userId}}\",\n        \"timestamp\": \"2019-07-15T16:43:39+12:00\",\n        \"messagetext\": \"working??\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all current notes for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0de3ae9-6f09-46c2-a80b-ca7036f85aac",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/all/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"all",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload a piece of device data for the user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d4429b3-4a37-4c38-a5ac-4710a4d1055e",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3d49ccc-ff0d-4f70-a9b9-d1c3b544fa8f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"deviceId\": \"Device-123\",\n    \"type\": \"smbg\",\n    \"value\": 106,\n    \"units\": \"mg/dL\",\n    \"subType\": \"linked\",\n    \"payload\": {\n      \"logIndices\": [\n        1\n      ]\n    },\n    \"uploadId\": \"upid_d5f278d59e4a\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the last piece of uploaded device data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cc76193-ba99-40c2-9a10-05e6d97d883c",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=smbg&latest=true",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "smbg"
								},
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7e2137b-c061-4b4e-8e79-0f82167b544e",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Non-specific usage of the tidepool API with the goal of giving it a quick smoke test so see that its is working as many clients would execpt it too. We are looking at\n\n - response code\n - response timing \n - headers, specificcally the x-tidepool-session and content type\n - response json data to make sure it matches our schema expectations at a high level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63ca11a0-8914-4c00-9183-47ee6a89d6ba",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clinician signup and setup",
			"item": [
				{
					"name": "Clinician sign up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0dcd5701-54ae-47e9-a511-5d516f2aaf77",
								"exec": [
									"var moment = require('moment');",
									"pm.variables.set(\"currentTimestamp\", moment().unix());",
									"const uuid = require('uuid');",
									"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a89622c-3861-4e34-8c49-65f3caea3d98",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 1000, true, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"qa+automatedclinician{{currentTimestamp}}@tidepool.org\",\n    \"password\": \"{{signupPw}}\",\n    \"emails\": [\n        \"qa+automatedclinician{{currentTimestamp}}@tidepool.org\"\n    ],\n    \"roles\": [\n        \"clinic\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for the clinician account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2619f622-7fef-43de-a5a7-e5b9e8ad7032",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fc38247-1aca-4699-b320-049f432a4ada",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c8bd890-baa6-4dc0-9d87-9598c17609de",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "908c375d-3270-4a33-a4f7-ce56cea93dcb",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51acdfde-2ef6-444e-be60-bc7b5cb07125",
								"exec": [
									"var moment = require('moment');\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial clinic profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "801cb329-3361-47eb-ae46-467b50ec0748",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "43114eba-0f4e-4d37-8fb9-90931e0be5c7",
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"clinic\":{\"role\":\"endocrinologist\",\"name\":\"{{$randomCompanyName}} Clinic\",\"telephone\":\"{{$randomPhoneNumber}}\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name, clinic name, role and telephone number."
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b558e3d8-3ab7-4cea-913d-733959750ffa",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50493ea7-3031-482c-8f2c-7163fa9c18fe",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Clinician signs up for tidepool, and fills out profile.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "786f15d8-103f-44a5-8b48-40fca8ce0791",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clinician new patient appt",
			"item": [
				{
					"name": "Clincian login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c77d09e-705d-48c4-b203-8272ce04136e",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48f61825-8cf7-42d1-a661-aab9a924c4c1",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Create custodial user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b39d1367-eb0a-41b8-b143-1d4889c21fe0",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"custodialUserId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user/{{userId}}/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user",
								"{{userId}}",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clinician login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2583da47-a8e7-41ca-a851-cf00d868ce2e",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create custodial profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a1e8772-0237-47c3-88cf-41f9f52037d4",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d4af8cf-1d06-4096-92ab-fd5fd46135c6",
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"mrn\":\"{{$randomInt}}\",\"targetTimezone\":\"US/Eastern\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{custodialUserId}}",
								"profile"
							]
						},
						"description": "Setting up Name, clinic name, role and telephone number."
					},
					"response": []
				},
				{
					"name": "Upload device data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac7f8dbe-ea53-4e87-a235-552ebc84421f",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
									"pm.variables.set(\"uploadId\", uuid.v4().replace(/-/g, '').slice(0,12));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "014431b0-40ff-433f-9842-a7be706b7648",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"normal\": 2.47,\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": 8.437136946389211\n    }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							]
						},
						"description": "uploading smbg, cbg and bolus data"
					},
					"response": []
				},
				{
					"name": "Retrieve last SMBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901012e-ce38-4df5-a2de-29b10ac2f619",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload meter data."
					},
					"response": []
				},
				{
					"name": "Retrieve last CBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40d09069-2377-4e02-a977-b5ed3f68b9f4",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c7af985-2251-40ea-a810-995c41a117cc",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{custodialUserId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Create note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af5c823f-81a6-481a-809f-bfa25d445d33",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"messageId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db3efed3-1fdd-4a26-b886-8babe4883139",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"messageGUI\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"noteCreationTime\", now.format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Increasing nighttime basal rate\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{custodialUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{custodialUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f15f6732-cd4f-4f1d-baf3-ea508c2ba57d",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Clinician adds new custodial patient, uploads data, and creates notes. Custodial patient claims account.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data storage account signup and setup",
			"item": [
				{
					"name": "DSA sign-up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "254d38a2-071d-44fb-aacb-c2df78bd1bc9",
								"exec": [
									"const moment = require('moment');",
									"pm.variables.set(\"currentTimestamp\", moment().unix());",
									"const uuid = require('uuid');",
									"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e28abbe4-8569-41af-8d9d-d70377cf624b",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 1000, true, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"pm.variables.set(\"userId\", jsonData.userid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"qa+automated{{currentTimestamp}}@tidepool.org\",\"password\":\"{{signupPw}}\",\"emails\":[\"qa+automated{{currentTimestamp}}@tidepool.org\"],\"roles\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
					},
					"response": []
				},
				{
					"name": "Send email verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f01d88a2-3d97-4f4f-b4d5-9f48eca1e21d",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/send/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Send the email confirmation using the `userId` we picked up in the last request."
					},
					"response": []
				},
				{
					"name": "Retrieve email key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9308ecbb-5359-4c32-b737-4b56b02a564d",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"emailKey\", jsonData[0].key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/signup/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"signup",
								"{{userId}}"
							]
						},
						"description": "Get `emailKey` to use in next request to confirm email"
					},
					"response": []
				},
				{
					"name": "Confirm email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2be39995-22fd-4951-81f7-5ec41bf2201f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"signup",
								"{{emailKey}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Using `emailKey` to confirm email."
					},
					"response": []
				},
				{
					"name": "Accept terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "905e552a-1056-4ae6-ab96-e11ed1b54f3a",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e4d4072-fa84-49a6-be99-c632fa7968e7",
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.variables.set(\"currentTimestamp\", moment().format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Accepting Terms and conditions"
					},
					"response": []
				},
				{
					"name": "Initial DSA profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e1a30e9-ebf6-4ef4-a3e0-a0250704c536",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a44aaf5d-c845-42b4-837e-65cd00b862ff",
								"exec": [
									"var moment = require('moment');\r",
									"let newMoment = moment().subtract(18, 'years');\r",
									"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Setting up Name and birthdate (18 years old) for the new user."
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70a3c073-449a-41f5-987e-73ddb09f4f39",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Verify user profile stored successfully."
					},
					"response": []
				},
				{
					"name": "Change BG Units",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dec4591-bab2-411b-bfe5-2eff26680368",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userSettingsSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"bgTarget\":{\"high\":10,\"low\":3.9},\"units\":{\"bg\":\"mmol/L\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/settings",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"settings"
							]
						},
						"description": "Changing BG units to mmol/L, another aspect a user can change in the user profile."
					},
					"response": []
				},
				{
					"name": "Retrieve settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfafcb7a-c9f4-466e-a4ff-0113b8e2492b",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"userSettingsSchema\");",
									"pm.test(\"Verify settings change to mmol\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.units.bg).to.eql(\"mmol/L\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/settings",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"settings"
							]
						},
						"description": "Verifying the change to mmol/L was stored."
					},
					"response": []
				},
				{
					"name": "Tidepool data donation opt-in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "033e8c25-68b2-46b3-8cfd-295d9e53ae6e",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{dataDonationEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Data donation selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d87f0f18-183c-4079-8022-ece725f1c738",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{dataDonationOrgEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tidepool data donation opt-out",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dca8462-529b-455c-9263-1adc08bcdd40",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{dataDonationEmail}}"
							]
						},
						"description": "This removes the data donation option and makes sure our test accounts aren't being added to the data pool."
					},
					"response": []
				},
				{
					"name": "Remove data donation selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03eea00a-09d0-47ed-abdd-7cd18870b685",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationOrgEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{dataDonationOrgEmail}}"
							]
						},
						"description": "This removes the data donation selection 'JDRF' and makes sure our test accounts aren't being added to the data pool."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55697544-78e3-43bd-a121-f48b8e823bb9",
								"exec": [
									"const assert = eval(globals.loadAsserts);\r",
									"assert.common(204, 2000, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\":\"{{signupPw}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/v1/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "The initial interactions a user goes through to sign up for tidepool and set up their profile.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7261fc8a-820f-4a8a-964d-830aeb650d7a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data storage account clincian appt",
			"item": [
				{
					"name": "DSA login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a447cc3-2a84-49b0-bce0-46a351ebabea",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a9c74b-a689-4f7f-8a00-d1eb00b1a66f",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload device data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e65e31c-3562-4f3b-9bf3-416889d2bae6",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
									"pm.variables.set(\"uploadId\", uuid.v4().replace(/-/g, '').slice(0,12));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5c078a5-b7f4-4cf9-9426-b3cda147f0d5",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"normal\": 2.47,\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": 8.437136946389211\n    }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						},
						"description": "uploading smbg, cbg and bolus data"
					},
					"response": []
				},
				{
					"name": "Retrieve last SMBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6bf65e1-3374-41b8-9013-76e0e31d42da",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload meter data."
					},
					"response": []
				},
				{
					"name": "Retrieve last CBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1eef962d-e097-4111-a621-fb6e3a51f5d1",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73dddb57-2e65-4727-bdf8-3bda494d7fce",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Create note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43dc27e5-dffe-42a3-8ccb-632e78f26ae1",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"messageId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bd1a9532-ffd6-4614-9ffe-87957cdf704e",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"messageGUI\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"noteCreationTime\", now.format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Forgot to Bolus for Meal\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc00e987-4832-4070-893f-2f445d70e90c",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite clinician to see data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "179a0c88-6ff5-437d-96b2-fdb86afc1ead",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"inviteKey\", jsonData.key);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"qa+clinician@tidepool.org\",\n  \"permissions\": {\n    \"view\": {},\n    \"note\":{},\n    \"upload\":{}\n  }\n}"
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84e4e5b2-4dac-4b5e-bdb2-0b83b33fb4c5",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clincian login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef144576-39c5-42c7-aa8c-781d0318b6c0",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"clinicUserId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clinicPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clinicEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5143ced1-2053-49ce-8562-2a7827f9d05b",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"key\":\"{{inviteKey}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/accept/invite/{{clinicUserId}}/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"accept",
								"invite",
								"{{clinicUserId}}",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve user profile (clinic)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b87d60b6-0679-44b4-ae1a-30c365353b31",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve last SMBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "265ce81c-fc5c-43ba-b63b-e3ff5bb95eb1",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "smbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload meter data."
					},
					"response": []
				},
				{
					"name": "Retrieve last CBG data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bb14a78-34b2-4253-850c-813bca1d2b06",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "cbg"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last bolus data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa1356ad-3ab2-4371-b4ff-c8d7a19dc2cd",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								},
								{
									"key": "type",
									"value": "bolus"
								}
							]
						},
						"description": "Verifying the data was stored from previous request to upload pump data."
					},
					"response": []
				},
				{
					"name": "Retrieve last note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c21e4b75-12c1-446b-8d4d-423a666979f5",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
									"pm.test(\"Note retrieved is the same one we created\", function () {",
									"let jsonData = pm.response.json();",
									"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/thread/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"thread",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment on note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0955ffbe-1948-480f-8c3b-2e211beb3e92",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bfa9c257-1738-46d7-8240-9b5f9782d334",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"messageGUI\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"noteCreationTime\", now.format());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"parentmessage\": \"{{messageId}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\": \"{{clinicUserId}}\",\n        \"messagetext\": \"Clinician comment\",\n        \"timestamp\": \"{{noteCreationTime}}\",\n        \"guid\": \"{{messageGUI}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/reply/{{messageId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"reply",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27719dc8-f34e-4010-b198-6b6761c731d1",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "DSA login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae9b509c-3512-4221-b191-264d2cfe7dc8",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							],
							"query": [
								{
									"key": "x-tidepool-session-token",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove clinician from share",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e1ecf06-7a09-4c81-8a97-b4a476304076",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/access/{{userId}}/{{clinicUserId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"access",
								"{{userId}}",
								"{{clinicUserId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset clinician invitation status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "858dfa42-011b-482c-9469-c2c9a57ec21e",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"key\":\"{{inviteKey}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/confirm/{{userId}}/invited/{{clinicEmail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"{{userId}}",
								"invited",
								"{{clinicEmail}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "DSA that uploads data to their Tidepool Account, adds notes and shares data with their clinician in preparation for a clinic appointment.",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0cacb60f-1886-49ec-a84f-ad7e7c8221f7",
				"type": "text/javascript",
				"exec": [
					"const userSchema = { \"required\": [\"userid\", \"username\", \"emails\", \"emailVerified\", \"termsAccepted\"], \"properties\": { \"emailVerified\": { \"type\": \"boolean\" }, \"emails\": { \"type\": \"array\" }, \"userid\": { \"type\": \"string\" }, \"username\": { \"type\": \"string\" }, \"termsAccepted\": { \"type\": \"string\" } } };",
					"const messageAddedSchema = { \"required\": [\"id\"], \"properties\": { \"id\": { \"type\": \"string\" } } };",
					"const messagesSchema = { \"type\": \"array\", \"items\": { \"required\": [\"id\", \"guid\", \"parentmessage\", \"userid\", \"groupid\", \"timestamp\", \"createdtime\", \"messagetext\", \"user\"], \"properties\": { \"id\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"userid\": { \"type\": \"string\" }, \"groupid\": { \"type\": \"string\" }, \"timestamp\": { \"type\": \"string\" }, \"createdtime\": { \"type\": \"string\" }, \"messagetext\": { \"type\": \"string\" }, \"user\": { \"type\": \"object\" } } } };",
					"const smbgsSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const cbgSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const bolusSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"uploadId\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"normal\": {\"type\": \"number\"}, \"extended\":{\"type\": \"integer\"}, \"expectedExtended\":{\"type\": \"integer\"}, \"duration\":{\"type\": \"integer\"}, \"expectedDuration\":{\"type\": \"integer\"}, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" } } } }",
					"const userProfileSchema = {\"required\": [\"fullName\"], \"properties\": { \"fullName\": { \"type\": \"string\" },",
					"\"patient\": { \"type\": \"object\" }, \"clinic\": {\"type\": \"object\"}}};",
					"const careteamInviteSchema = { \"required\": [\"key\", \"type\", \"email\", \"creatorId\", \"creator\", \"context\", \"created\"], \"properties\": { \"key\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"email\": { \"type\": \"string\" }, \"creatorId\": { \"type\": \"string\" }, \"creator\": { \"type\": \"object\" }, \"context\": { \"type\": \"object\" }, \"created\": { \"type\": \"string\" } } };",
					"const userSettingsSchema = { \"required\": [\"bgTarget\", \"units\"], \"properties\": { \"bgTarget\": { \"type\": \"object\" }, \"units\": { \"type\": \"object\" } } };",
					"",
					"pm.globals.set(\"userSchema\", JSON.stringify(userSchema));",
					"pm.globals.set(\"userProfileSchema\", JSON.stringify(userProfileSchema));",
					"pm.globals.set(\"messageAddedSchema\", JSON.stringify(messageAddedSchema));",
					"pm.globals.set(\"messagesSchema\", JSON.stringify(messagesSchema));",
					"pm.globals.set(\"smbgsSchema\", JSON.stringify(smbgsSchema));",
					"pm.globals.set(\"cbgSchema\", JSON.stringify(cbgSchema));",
					"pm.globals.set(\"bolusSchema\", JSON.stringify(bolusSchema));",
					"pm.globals.set(\"careteamInviteSchema\", JSON.stringify(careteamInviteSchema));",
					"pm.globals.set(\"userSettingsSchema\", JSON.stringify(userSettingsSchema));",
					"",
					"pm.globals.set('loadAsserts', function loadAsserts() {",
					"    let asserts = {};",
					"    asserts.responseTimeMsLessThan = function responseTimeMsLessThan(ms) {",
					"        pm.test(\"Response time is less than \"+ms+\"ms\", function () {",
					"            //pm.expect(pm.response.responseTime).to.be.below(ms);",
					"            console.log(\"Expected response in ms under \",ms);",
					"            console.log(\"Actual response time in ms \",pm.response.responseTime);",
					"        });",
					"    };",
					"    asserts.responseTypeJson = function responseTypeJson() {",
					"        pm.test(\"Response type is application/json\", function () {",
					"            pm.expect(pm.response.headers.get(\"content-type\")).to.equal('application/json');",
					"        });",
					"    };",
					"    asserts.responseHasSessionToken = function responseHasSessionToken() {",
					"        pm.test(\"Response has x-tidepool-session-token\", function () {",
					"            pm.response.to.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseHasNoSessionToken = function responseHasNoSessionToken(){",
					"         pm.test(\"Response has NO x-tidepool-session-token\", function () {",
					"            pm.response.to.not.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseBodyMatchesSchema = function responseBodyMatchesSchema(jsonData,schemaName) {",
					"         pm.test(\"Response body matches \"+schemaName, function () {",
					"            let schema = JSON.parse(pm.globals.get(schemaName));",
					"            pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
					"         });",
					"    };",
					"    asserts.responseStatusCodeIs = function responseStatusCodeIs(code){",
					"        pm.test(\"Response status is \"+code, function () {",
					"            pm.response.to.have.status(code);",
					"        });",
					"    };",
					"    asserts.common = function common(expectedCode, durationMs, hasSessionToken, jsonData, schemaName){",
					"            asserts.responseStatusCodeIs(expectedCode);",
					"            asserts.responseTimeMsLessThan(durationMs);",
					"            if(hasSessionToken){",
					"                assert.responseHasSessionToken();",
					"            }else{",
					"                assert.responseHasNoSessionToken();",
					"            }",
					"            if (jsonData!==null){",
					"                assert.responseTypeJson();",
					"                assert.responseBodyMatchesSchema(jsonData,schemaName);",
					"            }",
					"    };",
					"    return asserts;",
					"} + '; loadAsserts();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "affd0137-cc10-48c5-a135-0e7a3ce64b08",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}