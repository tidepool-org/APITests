{
	"info": {
		"_postman_id": "d6905a65-eb53-42f5-a185-8f1c54ef3506",
		"name": "API_smoke_test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Clients smoke test",
			"item": [
				{
					"name": "login to tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6af8cef6-2708-4cc5-bd4a-a40c4f5d44ad",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the logged in users profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1970107-0da8-47b2-b29b-346c50cb4ecd",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "invite another user see data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0088d076-ff1c-4d07-8fcb-ceab128247a1",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94d526ec-92a1-4b8f-84c9-89b5ce638d18",
								"exec": [
									"const emailName = pm.environment.get(\"sharingEmailName\");",
									"let emailAddress = emailName+ \"+sharing_\" + Date.now() + \"@tidepool.org\";",
									"pm.variables.set(\"sharingEmailAddress\", emailAddress);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{sharingEmailAddress}}\",\n  \"permissions\": {\n    \"view\": {}\n  }\n}"
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a note for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4967b8f5-8493-4f4e-aa22-6feeee594cb1",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{$guid}}\",\n        \"userid\": \"{{userId}}\",\n        \"timestamp\": \"2019-07-15T16:43:39+12:00\",\n        \"messagetext\": \"working??\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all current notes for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89cd40ca-884e-4d2d-884f-2cde47af1d5b",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/all/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"all",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload a piece of device data for the user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4095e3c9-09ed-4ba0-b2f9-d91c84b9999e",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7c34f828-adf4-4fb0-9f42-a4001dfb87a9",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"deviceId\": \"Device-123\",\n    \"type\": \"smbg\",\n    \"value\": 106,\n    \"units\": \"mg/dL\",\n    \"subType\": \"linked\",\n    \"payload\": {\n      \"logIndices\": [\n        1\n      ]\n    },\n    \"uploadId\": \"upid_d5f278d59e4a\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the last piece of uploaded device data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10db6b4d-4dc3-4b99-9284-205294111ce9",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=smbg&latest=true",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "smbg"
								},
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afa12327-c0fb-4e15-ae81-b17c2c868708",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Non-specific usage of the tidepool API with the goal of giving it a quick smoke test so see that its is working as many clients would execpt it too. We are looking at\n\n - response code\n - response timing \n - headers, specificcally the x-tidepool-session and content type\n - response json data to make sure it matches our schema expectations at a high level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b0df1ccd-17a4-4142-984d-a5c33eb8803c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Contract tests",
			"item": [
				{
					"name": "Clinician signup and setup",
					"item": [
						{
							"name": "Clinician sign up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "745cd29e-5004-4454-8442-aa017db3517e",
										"exec": [
											"var moment = require('moment');",
											"pm.variables.set(\"currentTimestamp\", moment().unix());",
											"const uuid = require('uuid');",
											"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a4c84bff-76f0-44ea-a6a3-8a0da39335ca",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 1000, true, null,\"\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.variables.set(\"userId\", jsonData.userid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"qa+automatedclinician{{currentTimestamp}}@tidepool.org\",\n    \"password\": \"{{signupPw}}\",\n    \"emails\": [\n        \"qa+automatedclinician{{currentTimestamp}}@tidepool.org\"\n    ],\n    \"roles\": [\n        \"clinic\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for the clinician account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "Send email verification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dea34c7a-381f-4f99-8df3-38d7ed36c2c8",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/send/signup/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"signup",
										"{{userId}}"
									]
								},
								"description": "Send the email confirmation using the `userId` we picked up in the last request."
							},
							"response": []
						},
						{
							"name": "Retrieve email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c251ec45-a999-4b35-9180-025108929e30",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"emailKey\", jsonData[0].key);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/signup/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"signup",
										"{{userId}}"
									]
								},
								"description": "Get `emailKey` to use in next request to confirm email"
							},
							"response": []
						},
						{
							"name": "Confirm email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06c15e9e-1b44-42e7-beb3-309fc04c8445",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"accept",
										"signup",
										"{{emailKey}}"
									]
								},
								"description": "Using `emailKey` to confirm email."
							},
							"response": []
						},
						{
							"name": "Accept terms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b182a123-7c19-4602-a025-6ca099d58609",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7c92145-7112-415f-bf2b-2e01d51a0512",
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Initial clinic profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5751789d-9917-4d7f-8d1a-f2dc7e4d9a90",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8be4cba1-ee4d-46b5-a516-ee7576eb1f89",
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"clinic\":{\"role\":\"endocrinologist\",\"name\":\"{{$randomCompanyName}} Clinic\",\"telephone\":\"{{$randomPhoneNumber}}\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinic name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2dc49b2-42ab-4c0f-9ba8-8105a5f42a22",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Verify user profile stored successfully."
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31b176e5-07a7-4b7c-b5f1-ce3c7263b96d",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "Clinician signs up for tidepool, and fills out profile.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7b9afd1-a351-460a-a990-9f148097517b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clinicians new patient appt",
					"item": [
						{
							"name": "Clincian login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87000b64-cd33-44b7-b714-1be51b76d078",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clinicPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clinicEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0284c89-2cf9-428a-95a0-a20fced1fca8",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Verify user profile stored successfully."
							},
							"response": []
						},
						{
							"name": "Create custodial user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdd5c46c-ccb9-4985-a283-af9b3bab9663",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"custodialUserId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user/{{userId}}/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user",
										"{{userId}}",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clinician login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d40fd339-7c9d-4f80-a92f-3887390fd2d3",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clinicPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clinicEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custodial profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f23c54c-07ad-4d92-93bd-15b242c2e144",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c380b26-d7d1-46bc-a316-f92ddb726441",
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"mrn\":\"{{$randomInt}}\",\"targetTimezone\":\"US/Eastern\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{custodialUserId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinic name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "Upload device data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2618ef7-b7a6-40f6-b382-ab74dd398368",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
											"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
											"pm.variables.set(\"uploadId\", uuid.v4().replace(/-/g, '').slice(0,12));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12a91dd1-1fd2-4339-8354-c1eb8f3b56a9",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"normal\": 2.47,\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": 8.437136946389211\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						},
						{
							"name": "Retrieve last SMBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8f2a96d-3db5-4e07-b5ef-ef5d7275f48a",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload meter data."
							},
							"response": []
						},
						{
							"name": "Retrieve last CBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e4b8428-02f8-41db-9e3a-b12e96c8dfc2",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "007efe7c-fea2-4d17-815d-906a86a032c4",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Create note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05eb1692-2d79-4c3f-86dc-32a040c7cb41",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"messageId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4af6e116-cb58-4947-a822-392c2672ffc5",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"messageGUI\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"noteCreationTime\", now.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Increasing nighttime basal rate\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/send/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"send",
										"{{custodialUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b78e673-9d4e-42f6-80fe-bf6581b5772f",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"let jsonData = pm.response.json();",
											"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Clinician adds new custodial patient, uploads data, and creates notes. Custodial patient claims account.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DSA signup and setup",
					"item": [
						{
							"name": "DSA sign-up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f87ed627-73fe-4640-96a4-f29476e1e5c8",
										"exec": [
											"const moment = require('moment');",
											"pm.variables.set(\"currentTimestamp\", moment().unix());",
											"const uuid = require('uuid');",
											"pm.variables.set(\"signupPw\", uuid.v4().slice(0,9));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b57e7fed-49f5-4a58-9fac-c2ace4413d11",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 1000, true, null,\"\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.variables.set(\"userId\", jsonData.userid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"qa+automated{{currentTimestamp}}@tidepool.org\",\"password\":\"{{signupPw}}\",\"emails\":[\"qa+automated{{currentTimestamp}}@tidepool.org\"],\"roles\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "Send email verification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0735b1a-ff87-4359-ae8d-96ed8914614a",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/send/signup/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"signup",
										"{{userId}}"
									]
								},
								"description": "Send the email confirmation using the `userId` we picked up in the last request."
							},
							"response": []
						},
						{
							"name": "Retrieve email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18a3c3c5-09d8-4732-9b2b-8c9210900b98",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"emailKey\", jsonData[0].key);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/signup/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"signup",
										"{{userId}}"
									]
								},
								"description": "Get `emailKey` to use in next request to confirm email"
							},
							"response": []
						},
						{
							"name": "Confirm email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba996b30-fe85-42f8-b1d4-7f9db03ee3c6",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"accept",
										"signup",
										"{{emailKey}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Using `emailKey` to confirm email."
							},
							"response": []
						},
						{
							"name": "Accept terms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25e7816f-8d14-4bfe-a9ca-b2278d466efd",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6dc0a367-b270-40e5-9b80-befdccc9a841",
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Initial DSA profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4fe27c1-a75a-4e50-8438-31abb7f9bc9a",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de5af0c1-e5fb-4969-987d-207caeced244",
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name and birthdate (18 years old) for the new user."
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4affcb5c-3f50-4abf-823a-f719a584b8aa",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Verify user profile stored successfully."
							},
							"response": []
						},
						{
							"name": "Change BG Units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1593ea83-5559-40ba-9df5-bd6cd6132339",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userSettingsSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bgTarget\":{\"high\":10,\"low\":3.9},\"units\":{\"bg\":\"mmol/L\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/settings",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"settings"
									]
								},
								"description": "Changing BG units to mmol/L, another aspect a user can change in the user profile."
							},
							"response": []
						},
						{
							"name": "Retrieve settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48de2e59-c206-4f3f-b367-bf4315f26661",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userSettingsSchema\");",
											"pm.test(\"Verify settings change to mmol\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.units.bg).to.eql(\"mmol/L\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/settings",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"settings"
									]
								},
								"description": "Verifying the change to mmol/L was stored."
							},
							"response": []
						},
						{
							"name": "Tidepool data donation opt-in",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76772a60-3a1b-4de5-9da5-00f9349ad3be",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"careteamInviteSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"email\":\"{{dataDonationEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Data donation selection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0607137-78a6-495e-826b-4cc0e1f3df36",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"careteamInviteSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"email\":\"{{dataDonationOrgEmail}}\",\"permissions\":{\"view\":{},\"note\":{}}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tidepool data donation opt-out",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bd9f8cf-2d78-4d80-8781-b72cbafe19b3",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationEmail}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"{{userId}}",
										"invited",
										"{{dataDonationEmail}}"
									]
								},
								"description": "This removes the data donation option and makes sure our test accounts aren't being added to the data pool."
							},
							"response": []
						},
						{
							"name": "Remove data donation selection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54a63ba3-b669-40a9-821f-cdba70367d86",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/{{userId}}/invited/{{dataDonationOrgEmail}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"{{userId}}",
										"invited",
										"{{dataDonationOrgEmail}}"
									]
								},
								"description": "This removes the data donation selection 'JDRF' and makes sure our test accounts aren't being added to the data pool."
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "706f748d-9628-4df4-abe8-c18b3e1def1d",
										"exec": [
											"const assert = eval(globals.loadAsserts);\r",
											"assert.common(204, 2000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"password\":\"{{signupPw}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/v1/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"v1",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The initial interactions a user goes through to sign up for tidepool and set up their profile.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d261d40-dbf3-4d60-b02b-c8d3e6062d81",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DSAs clincian appt",
					"item": [
						{
							"name": "DSA login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4aacdbbc-5273-4ce5-b416-2e104e60c607",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{loginPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{loginEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d414a09-8114-41ff-b4be-2e8ac0c1109e",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload device data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "665e1a61-57a3-41ac-9eea-72a868315c0c",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
											"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
											"pm.variables.set(\"uploadId\", uuid.v4().replace(/-/g, '').slice(0,12));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ae8ec22f-299a-46db-a29c-842ad9c928fb",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"normal\": 2.47,\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": 8.437136946389211\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						},
						{
							"name": "Retrieve last SMBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "894988cd-59a1-4510-829e-0fb2b5e097e4",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload meter data."
							},
							"response": []
						},
						{
							"name": "Retrieve last CBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51492e39-8d95-4d31-985e-62b06660a4ac",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "390693cb-da55-498e-af56-6347978650ee",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Create note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58471f12-0b7e-4417-a2c6-633bf3331d87",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"messageId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19f8adb8-64b5-446f-bc75-e525617e5a1a",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"messageGUI\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"noteCreationTime\", now.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Forgot to Bolus for Meal\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/send/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"send",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dd37b33-b350-489c-b539-d422735e0542",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"let jsonData = pm.response.json();",
											"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invite clinician to see data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9b93648-3c64-42b2-91b9-4eae301a973c",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"inviteKey\", jsonData.key);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"qa+clinician@tidepool.org\",\n  \"permissions\": {\n    \"view\": {},\n    \"note\":{},\n    \"upload\":{}\n  }\n}"
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e565e4e-b6a2-4d12-8bad-5c8660d87d9c",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clincian login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9037e51a-dda6-42e1-b437-a1ff932419bd",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"clinicUserId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clinicPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clinicEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm invitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bcfc860-8b0c-4a6b-8945-3fe5156b724d",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"key\":\"{{inviteKey}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/accept/invite/{{clinicUserId}}/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"accept",
										"invite",
										"{{clinicUserId}}",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user profile (clinic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3152c0a8-3153-41be-b1ee-90bf8085f364",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve last SMBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecb51a67-3d15-48a0-aa70-16a917a02abf",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload meter data."
							},
							"response": []
						},
						{
							"name": "Retrieve last CBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd272221-d03f-45ce-90c4-fb1559b15c97",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "376f3925-b161-48bc-bf1c-5d6692c4c15e",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
											"pm.test(\"one item is returned\", function () {",
											"pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e91ac50-014e-4cf7-87a0-bcb91897a547",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"let jsonData = pm.response.json();",
											"pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment on note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a601908-aee2-445d-b617-f49ff151f1a4",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18bc14e4-a9d8-44df-bd9a-79e1eb6ece4e",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"messageGUI\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"noteCreationTime\", now.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"parentmessage\": \"{{messageId}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\": \"{{clinicUserId}}\",\n        \"messagetext\": \"Clinician comment\",\n        \"timestamp\": \"{{noteCreationTime}}\",\n        \"guid\": \"{{messageGUI}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/reply/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"reply",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48f72a11-d0ed-45a8-b5c1-35ff2254a13b",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "DSA login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3102edb5-3bdb-4858-b224-f7e865a0c7d9",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{loginPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{loginEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									],
									"query": [
										{
											"key": "x-tidepool-session-token",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove clinician from share",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b2b5d4e-1b83-4953-9311-a1b0a47cc808",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/access/{{userId}}/{{clinicUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"access",
										"{{userId}}",
										"{{clinicUserId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset clinician invitation status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77c21444-3ba2-4379-bf36-b9f79b636101",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"key\":\"{{inviteKey}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/{{userId}}/invited/{{clinicEmail}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"{{userId}}",
										"invited",
										"{{clinicEmail}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "DSA that uploads data to their Tidepool Account, adds notes and shares data with their clinician in preparation for a clinic appointment.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User email notification integration",
			"item": [
				{
					"name": "Retrieve marketo access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65ca8f4b-cd44-4458-9d99-3bf847e505db",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"marketoAccessToken\", jsonData.access_token);",
									"if (pm.environment.get('api') == \"https://stg-api.tidepool.org\") {",
									"    postman.setNextRequest(\"Retrieve paging token for the last 12 hours\");",
									"} else if (pm.environment.get('api') == \"https://dev-api.tidepool.org\") {",
									"    postman.setNextRequest(\"Retrieve paging token for the last 12 hours\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/identity/oauth/token?grant_type=client_credentials&client_id={{marketoClientId}}&client_secret={{marketoClientSecret}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"identity",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								},
								{
									"key": "client_id",
									"value": "{{marketoClientId}}"
								},
								{
									"key": "client_secret",
									"value": "{{marketoClientSecret}}"
								}
							]
						},
						"description": "Retrieve unique access token from marketo. This token is valid for only **1 hour**."
					},
					"response": []
				},
				{
					"name": "Get lead email address initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1bf9d32-5229-4ac3-8b69-31b509b2a152",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"currentMarketoEmail\", jsonData.result[0].email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/lead/{{leadId}}.json?access_token={{marketoAccessToken}}&fields=email",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"lead",
								"{{leadId}}.json"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								},
								{
									"key": "fields",
									"value": "email"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login to tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c19507a2-1f99-44e7-90c2-8ee9d11878b2",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{marketoEmailPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{currentMarketoEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change email address in Tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4008fe8-5aea-4b97-bdf8-8c976edaf357",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"newMarketoEmail\", jsonData.username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e4e98dfe-e877-411b-a657-bd74be5a95d8",
								"exec": [
									"var moment = require('moment');",
									"pm.variables.set(\"currentTimestamp\", moment().unix());",
									"pm.variables.set(\"newMarketoEmail\", \"qa+automated+marketo{{currentTimestamp}}@tidepool.org.test-google-a.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"username\":\"{{newMarketoEmail}}\",\"emails\":[\"{{newMarketoEmail}}\"]}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Setting up Name, clinic name, role and telephone number."
					},
					"response": []
				},
				{
					"name": "Retrieve paging token for the last 12 hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4aed914-cc69-4288-8a3f-73c845232e8c",
								"exec": [
									"var moment = require('moment');\r",
									"pm.variables.set(\"current_timestamp\", moment().format());\r",
									"pm.variables.set(\"twelveHoursAgo\", moment().subtract(12, 'hours').format());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "718301ad-e10b-4147-9aae-c6288a9993ca",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"nextPageToken\", jsonData.nextPageToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/activities/pagingtoken.json?sinceDatetime={{twelveHoursAgo}}&access_token={{marketoAccessToken}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"activities",
								"pagingtoken.json"
							],
							"query": [
								{
									"key": "sinceDatetime",
									"value": "{{twelveHoursAgo}}"
								},
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								}
							]
						},
						"description": "returning paging token for last 12 hours in order to get lead changes in the following request"
					},
					"response": []
				},
				{
					"name": "Verify new lead activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28ae2600-47b8-4caf-936e-73d8ac9fcb9b",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"pm.test(\"User created within last 12 Hours\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.result[0].activityTypeId).to.eql(pm.variables.get(\"newUserActivity\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1475b804-5cf8-4070-a947-aca6baf5ee10",
								"exec": [
									"pm.variables.set(\"newUserActivity\", 12);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/activities.json?access_token={{marketoAccessToken}}&nextPageToken={{nextPageToken}}&activityTypeIds={{newUserActivity}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"activities.json"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								},
								{
									"key": "nextPageToken",
									"value": "{{nextPageToken}}"
								},
								{
									"key": "activityTypeIds",
									"value": "{{newUserActivity}}"
								}
							]
						},
						"description": "making sure new users have been added to the marketo database wihthin the last 12 hours"
					},
					"response": []
				},
				{
					"name": "Retrieve paging token for the last hour",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b610c884-440c-4e0d-8d21-13ee1410354b",
								"exec": [
									"var moment = require('moment');\r",
									"pm.variables.set(\"current_timestamp\", moment().format());\r",
									"pm.variables.set(\"oneHourAgo\", moment().subtract(1, 'hour').format());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6aec82bc-82cb-454f-a664-49a662d97741",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"nextPageToken\", jsonData.nextPageToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/activities/pagingtoken.json?sinceDatetime={{oneHourAgo}}&access_token={{marketoAccessToken}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"activities",
								"pagingtoken.json"
							],
							"query": [
								{
									"key": "sinceDatetime",
									"value": "{{oneHourAgo}}"
								},
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								}
							]
						},
						"description": "returning paging token for last hour in order to get lead changes in the following request"
					},
					"response": []
				},
				{
					"name": "Verify campaign emails being sent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9eb91802-9e68-473e-bbd1-dcf1fc984159",
								"exec": [
									"pm.variables.set(\"campaignEmailSent\", 7);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "71276abe-8904-4668-a3c0-476cf6196599",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"pm.test(\"Marketo has delivered emails within the last hour\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.result[0].activityTypeId).to.eql(pm.variables.get(\"campaignEmailSent\"));",
									"});",
									"if (pm.environment.get('api') == \"https://stg-api.tidepool.org\") {",
									"postman.setNextRequest(null);",
									"} else if (pm.environment.get('api') == \"https://dev-api.tidepool.org\") {",
									"postman.setNextRequest(null);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/activities.json?access_token={{marketoAccessToken}}&nextPageToken={{nextPageToken}}&activityTypeIds={{campaignEmailSent}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"activities.json"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								},
								{
									"key": "nextPageToken",
									"value": "{{nextPageToken}}"
								},
								{
									"key": "activityTypeIds",
									"value": "{{campaignEmailSent}}"
								}
							]
						},
						"description": "Verifying that marketo has attempted to send emails within the **last hour**."
					},
					"response": []
				},
				{
					"name": "Get lead email address updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34e38342-6335-4208-93f0-548a88d69e81",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"pm.test(\"Verify Lead email updated in Marketo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result[0].email).to.eql(pm.variables.get(\"newMarketoEmail\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/lead/{{leadId}}.json?access_token={{marketoAccessToken}}&fields=email",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"lead",
								"{{leadId}}.json"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								},
								{
									"key": "fields",
									"value": "email"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "A series of tests designed around making sure new clinicians and DSAs are being connected via shoreline to our marketing campaigns.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9b0fab4-e7dd-474d-8614-f1db8a1e0933",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c3564c97-2072-4d62-ba75-d0a6e3cbc0c2",
				"type": "text/javascript",
				"exec": [
					"const userSchema = { \"required\": [\"userid\", \"username\", \"emails\", \"emailVerified\", \"termsAccepted\"], \"properties\": { \"emailVerified\": { \"type\": \"boolean\" }, \"emails\": { \"type\": \"array\" }, \"userid\": { \"type\": \"string\" }, \"username\": { \"type\": \"string\" }, \"termsAccepted\": { \"type\": \"string\" } } };",
					"const messageAddedSchema = { \"required\": [\"id\"], \"properties\": { \"id\": { \"type\": \"string\" } } };",
					"const messagesSchema = { \"type\": \"array\", \"items\": { \"required\": [\"id\", \"guid\", \"parentmessage\", \"userid\", \"groupid\", \"timestamp\", \"createdtime\", \"messagetext\", \"user\"], \"properties\": { \"id\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"userid\": { \"type\": \"string\" }, \"groupid\": { \"type\": \"string\" }, \"timestamp\": { \"type\": \"string\" }, \"createdtime\": { \"type\": \"string\" }, \"messagetext\": { \"type\": \"string\" }, \"user\": { \"type\": \"object\" } } } };",
					"const smbgsSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const cbgSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const bolusSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"uploadId\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"normal\": {\"type\": \"number\"}, \"extended\":{\"type\": \"integer\"}, \"expectedExtended\":{\"type\": \"integer\"}, \"duration\":{\"type\": \"integer\"}, \"expectedDuration\":{\"type\": \"integer\"}, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" } } } }",
					"const userProfileSchema = {\"required\": [\"fullName\"], \"properties\": { \"fullName\": { \"type\": \"string\" },",
					"\"patient\": { \"type\": \"object\" }, \"clinic\": {\"type\": \"object\"}}};",
					"const careteamInviteSchema = { \"required\": [\"key\", \"type\", \"email\", \"creatorId\", \"creator\", \"context\", \"created\"], \"properties\": { \"key\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"email\": { \"type\": \"string\" }, \"creatorId\": { \"type\": \"string\" }, \"creator\": { \"type\": \"object\" }, \"context\": { \"type\": \"object\" }, \"created\": { \"type\": \"string\" } } };",
					"const userSettingsSchema = { \"required\": [\"bgTarget\", \"units\"], \"properties\": { \"bgTarget\": { \"type\": \"object\" }, \"units\": { \"type\": \"object\" } } };",
					"",
					"pm.globals.set(\"userSchema\", JSON.stringify(userSchema));",
					"pm.globals.set(\"userProfileSchema\", JSON.stringify(userProfileSchema));",
					"pm.globals.set(\"messageAddedSchema\", JSON.stringify(messageAddedSchema));",
					"pm.globals.set(\"messagesSchema\", JSON.stringify(messagesSchema));",
					"pm.globals.set(\"smbgsSchema\", JSON.stringify(smbgsSchema));",
					"pm.globals.set(\"cbgSchema\", JSON.stringify(cbgSchema));",
					"pm.globals.set(\"bolusSchema\", JSON.stringify(bolusSchema));",
					"pm.globals.set(\"careteamInviteSchema\", JSON.stringify(careteamInviteSchema));",
					"pm.globals.set(\"userSettingsSchema\", JSON.stringify(userSettingsSchema));",
					"",
					"pm.globals.set('loadAsserts', function loadAsserts() {",
					"    let asserts = {};",
					"    asserts.responseTimeMsLessThan = function responseTimeMsLessThan(ms) {",
					"        pm.test(\"Response time is less than \"+ms+\"ms\", function () {",
					"            //pm.expect(pm.response.responseTime).to.be.below(ms);",
					"            console.log(\"Expected response in ms under \",ms);",
					"            console.log(\"Actual response time in ms \",pm.response.responseTime);",
					"        });",
					"    };",
					"    asserts.responseTypeJson = function responseTypeJson() {",
					"        pm.test(\"Response type is application/json\", function () {",
					"            pm.expect(pm.response.headers.get(\"content-type\")).to.equal('application/json');",
					"        });",
					"    };",
					"    asserts.responseHasSessionToken = function responseHasSessionToken() {",
					"        pm.test(\"Response has x-tidepool-session-token\", function () {",
					"            pm.response.to.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseHasNoSessionToken = function responseHasNoSessionToken(){",
					"         pm.test(\"Response has NO x-tidepool-session-token\", function () {",
					"            pm.response.to.not.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseBodyMatchesSchema = function responseBodyMatchesSchema(jsonData,schemaName) {",
					"         pm.test(\"Response body matches \"+schemaName, function () {",
					"            let schema = JSON.parse(pm.globals.get(schemaName));",
					"            pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
					"         });",
					"    };",
					"    asserts.responseStatusCodeIs = function responseStatusCodeIs(code){",
					"        pm.test(\"Response status is \"+code, function () {",
					"            pm.response.to.have.status(code);",
					"        });",
					"    };",
					"    asserts.common = function common(expectedCode, durationMs, hasSessionToken, jsonData, schemaName){",
					"            asserts.responseStatusCodeIs(expectedCode);",
					"            asserts.responseTimeMsLessThan(durationMs);",
					"            if(hasSessionToken){",
					"                assert.responseHasSessionToken();",
					"            }else{",
					"                assert.responseHasNoSessionToken();",
					"            }",
					"            if (jsonData!==null){",
					"                assert.responseTypeJson();",
					"                assert.responseBodyMatchesSchema(jsonData,schemaName);",
					"            }",
					"    };",
					"    return asserts;",
					"} + '; loadAsserts();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "91d8d01e-5f2e-4b63-8b02-450c1268749c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}