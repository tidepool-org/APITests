{
	"info": {
		"_postman_id": "fbc22dde-d18f-4a6e-80b4-f134bea518bb",
		"name": "API_smoke_test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Clients smoke test",
			"item": [
				{
					"name": "login to tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4d13014-e96d-448d-9111-9e7e7ad6b0d4",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the logged in users profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b06c4cb-d22f-4aaa-affd-21409f088ebb",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "invite another user see data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b47e6bc6-1c25-4cfc-8108-c74526b62955",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "67c1ccc0-0e8e-44f9-a0ce-886ea2da1e0b",
								"exec": [
									"const emailName = pm.environment.get(\"sharingEmailName\");",
									"let emailAddress = emailName+ \"+sharing_\" + Date.now() + \"@tidepool.org\"",
									"pm.variables.set(\"sharingEmailAddress\", emailAddress);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{sharingEmailAddress}}\",\n  \"permissions\": {\n    \"view\": {}\n  }\n}"
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a note for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "315a1b8e-22d1-4abf-93b1-58bd2eb5dd2b",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{$guid}}\",\n        \"userid\": \"{{userId}}\",\n        \"timestamp\": \"2019-07-15T16:43:39+12:00\",\n        \"messagetext\": \"working??\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all current notes for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49096de6-a53b-4493-a7c1-1627631c2094",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/all/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"all",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload a piece of device data for the user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5eec4f64-9ca9-4b90-8c8c-4f184d1cf424",
								"exec": [
									"const uuid = require('uuid');",
									"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a21e1e5d-4c57-47bf-8a38-96791c8583c4",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"deviceId\": \"Device-123\",\n    \"type\": \"smbg\",\n    \"value\": 106,\n    \"units\": \"mg/dL\",\n    \"subType\": \"linked\",\n    \"payload\": {\n      \"logIndices\": [\n        1\n      ]\n    },\n    \"uploadId\": \"upid_d5f278d59e4a\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the last piece of uploaded device data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a72235ed-4133-4143-bdfa-540bbbbe5163",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=smbg&latest=true",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "smbg"
								},
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02ffe106-2550-4588-8f2e-e2dec4073e3c",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Non-specific usage of the tidepool API with the goal of giving it a quick smoke test so see that its is working as many clients would execpt it too. We are looking at\n\n - response code\n - response timing \n - headers, specificcally the x-tidepool-session and content type\n - response json data to make sure it matches our schema expectations at a high level",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f490c89e-1add-4378-8e78-76aa9c109d81",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "263e4689-3703-45f6-89f9-d17b16c8cf54",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User email notification integration",
			"item": [
				{
					"name": "Retrieve marketo access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db7332d2-a5d2-4772-afb1-0064493b958a",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"marketoAccessToken\", jsonData.access_token);",
									"if (pm.environment.get('api') == \"https://stg-api.tidepool.org\") {",
									"    postman.setNextRequest(\"Retrieve paging token for the last 12 hours\");",
									"} else if (pm.environment.get('api') == \"https://dev-api.tidepool.org\") {",
									"    postman.setNextRequest(\"Retrieve paging token for the last 12 hours\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/identity/oauth/token?grant_type=client_credentials&client_id={{marketoClientId}}&client_secret={{marketoClientSecret}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"identity",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								},
								{
									"key": "client_id",
									"value": "{{marketoClientId}}"
								},
								{
									"key": "client_secret",
									"value": "{{marketoClientSecret}}"
								}
							]
						},
						"description": "Retrieve unique access token from marketo. This token is valid for only **1 hour**."
					},
					"response": []
				},
				{
					"name": "Get lead email address initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc94c77d-e43d-4616-8c2d-95e04831d4f6",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"currentMarketoEmail\", jsonData.result[0].email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/lead/{{leadId}}.json?access_token={{marketoAccessToken}}&fields=email",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"lead",
								"{{leadId}}.json"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								},
								{
									"key": "fields",
									"value": "email"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login to tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5e77262-db2c-4f38-b5ad-d95767451f36",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"userId\", jsonData.userid);",
									"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{marketoEmailPw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{currentMarketoEmail}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change email address in Tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0612a6ff-ff5c-4c03-85ad-3cffaf1be7e5",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null,\"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"newMarketoEmail\", jsonData.username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ad6e657f-c9e1-4ddb-9054-88b1430336e9",
								"exec": [
									"var moment = require('moment');",
									"pm.variables.set(\"currentTimestamp\", moment().unix());",
									"pm.variables.set(\"newMarketoEmail\", \"qa+automated+marketo{{currentTimestamp}}@tidepool.org.test-google-a.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"type": "text",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"updates\":{\"username\":\"{{newMarketoEmail}}\",\"emails\":[\"{{newMarketoEmail}}\"]}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/auth/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"user"
							]
						},
						"description": "Setting up Name, clinic name, role and telephone number."
					},
					"response": []
				},
				{
					"name": "Retrieve paging token for the last 12 hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a0e28c8f-5fbd-4598-9ef6-6d3edbff9b18",
								"exec": [
									"var moment = require('moment');\r",
									"pm.variables.set(\"current_timestamp\", moment().format());\r",
									"pm.variables.set(\"twelveHoursAgo\", moment().subtract(12, 'hours').format());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51239610-4980-4382-b4ec-88af7151cefa",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"nextPageToken\", jsonData.nextPageToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/activities/pagingtoken.json?sinceDatetime={{twelveHoursAgo}}&access_token={{marketoAccessToken}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"activities",
								"pagingtoken.json"
							],
							"query": [
								{
									"key": "sinceDatetime",
									"value": "{{twelveHoursAgo}}"
								},
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								}
							]
						},
						"description": "returning paging token for last 12 hours in order to get lead changes in the following request"
					},
					"response": []
				},
				{
					"name": "Verify new lead activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51f1dd2c-6dc0-4573-a195-1b608fc22a97",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"",
									"pm.test(\"User created within last 12 Hours\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result[0].activityTypeId).to.eql(pm.variables.get(\"newUserActivity\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8f529f11-ce59-47d4-a663-e3bfa958b844",
								"exec": [
									"pm.variables.set(\"newUserActivity\", 12);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/activities.json?access_token={{marketoAccessToken}}&nextPageToken={{nextPageToken}}&activityTypeIds={{newUserActivity}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"activities.json"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								},
								{
									"key": "nextPageToken",
									"value": "{{nextPageToken}}"
								},
								{
									"key": "activityTypeIds",
									"value": "{{newUserActivity}}"
								}
							]
						},
						"description": "making sure new users have been added to the marketo database wihthin the last 12 hours"
					},
					"response": []
				},
				{
					"name": "Retrieve paging token for the last hour",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1818eee7-d7b6-485e-9375-7a27f87355e6",
								"exec": [
									"var moment = require('moment');\r",
									"pm.variables.set(\"current_timestamp\", moment().format());\r",
									"pm.variables.set(\"oneHourAgo\", moment().subtract(1, 'hour').format());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3ffe6d0c-87eb-49b1-8a4a-90088e5dcf30",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"let jsonData = pm.response.json();",
									"pm.variables.set(\"nextPageToken\", jsonData.nextPageToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/activities/pagingtoken.json?sinceDatetime={{oneHourAgo}}&access_token={{marketoAccessToken}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"activities",
								"pagingtoken.json"
							],
							"query": [
								{
									"key": "sinceDatetime",
									"value": "{{oneHourAgo}}"
								},
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								}
							]
						},
						"description": "returning paging token for last hour in order to get lead changes in the following request"
					},
					"response": []
				},
				{
					"name": "Verify campaign emails being sent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98943c0a-1680-45c2-b3b0-7c27fca3c06f",
								"exec": [
									"pm.variables.set(\"campaignEmailSent\", 7);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bd139c6b-b7bb-4d1a-82d9-b80c359eeefd",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"",
									"pm.test(\"Marketo has delivered emails within the last hour\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result[0].activityTypeId).to.eql(pm.variables.get(\"campaignEmailSent\"));",
									"});",
									"if (pm.environment.get('api') == \"https://stg-api.tidepool.org\") {",
									"    postman.setNextRequest(null);",
									"} else if (pm.environment.get('api') == \"https://dev-api.tidepool.org\") {",
									"    postman.setNextRequest(null);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/activities.json?access_token={{marketoAccessToken}}&nextPageToken={{nextPageToken}}&activityTypeIds={{campaignEmailSent}}",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"activities.json"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								},
								{
									"key": "nextPageToken",
									"value": "{{nextPageToken}}"
								},
								{
									"key": "activityTypeIds",
									"value": "{{campaignEmailSent}}"
								}
							]
						},
						"description": "Verifying that marketo has attempted to send emails within the **last hour**."
					},
					"response": []
				},
				{
					"name": "Get lead email address updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eae713a3-f55d-4cad-8f62-03737aed5ae7",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, false, null, \"\");",
									"pm.test(\"Verify Lead email updated in Marketo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result[0].email).to.eql(pm.variables.get(\"newMarketoEmail\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketoApi}}/rest/v1/lead/{{leadId}}.json?access_token={{marketoAccessToken}}&fields=email",
							"host": [
								"{{marketoApi}}"
							],
							"path": [
								"rest",
								"v1",
								"lead",
								"{{leadId}}.json"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{marketoAccessToken}}"
								},
								{
									"key": "fields",
									"value": "email"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "A series of tests designed around making sure new clinicians and DSAs are being connected via shoreline to our marketing campaigns.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a122569-2a89-4377-bcb5-8fecc3197dd3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Contract tests",
			"item": [
				{
					"name": "Clinician signup and setup",
					"item": [
						{
							"name": "Clinician sign up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "72e6dbe1-2283-44b9-8e51-76fbab62e71a",
										"exec": [
											"var moment = require('moment');",
											"",
											"    pm.variables.set(\"currentTimestamp\", moment().unix());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aef68e59-fa85-4675-bd0c-d73bcfc4f666",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 1000, true, null,\"\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"qa+automatedclinician{{currentTimestamp}}@tidepool.org\",\n    \"password\": \"{{$randomPassword}}\",\n    \"emails\": [\n        \"qa+automatedclinician{{currentTimestamp}}@tidepool.org\"\n    ],\n    \"roles\": [\n        \"clinic\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for the clinician account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "Send email verification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fb5a1e8-5b9d-45d1-ac8c-0c0f0352ee5e",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null,\"\");",
											"    ",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/send/signup/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"signup",
										"{{userId}}"
									]
								},
								"description": "Send the email confirmation using the `userId` we picked up in the last request."
							},
							"response": []
						},
						{
							"name": "Retrieve email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"emailKey\", jsonData[0].key);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/signup/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"signup",
										"{{userId}}"
									]
								},
								"description": "Get `emailKey` to use in next request to confirm email"
							},
							"response": []
						},
						{
							"name": "Confirm email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"accept",
										"signup",
										"{{emailKey}}"
									]
								},
								"description": "Using `emailKey` to confirm email."
							},
							"response": []
						},
						{
							"name": "Accept terms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41dbe3a9-efca-4b72-a543-b58ac98dc070",
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Initial clinic profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41dbe3a9-efca-4b72-a543-b58ac98dc070",
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"clinic\":{\"role\":\"endocrinologist\",\"name\":\"{{$randomCompanyName}} Clinic\",\"telephone\":\"{{$randomPhoneNumber}}\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinic name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3848609-36dc-4ef7-86d6-9a21656afffa",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Verify user profile stored successfully."
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a9c738-74ab-403a-9f63-7e963c699683",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "Clinician signs up for tidepool, and fills out profile.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7358686c-7cfb-4a1c-810d-71ffa6e7cd90",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f2a65db9-4f0d-4a42-bb90-ab32c73b1734",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clinicians new patient appt",
					"item": [
						{
							"name": "Clincian login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b59cdb1-4486-485b-b4b0-99002d08dba9",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clinicPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clinicEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3848609-36dc-4ef7-86d6-9a21656afffa",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Verify user profile stored successfully."
							},
							"response": []
						},
						{
							"name": "Create custodial user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b59cdb1-4486-485b-b4b0-99002d08dba9",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"custodialUserId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user/{{userId}}/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user",
										"{{userId}}",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clinician login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b59cdb1-4486-485b-b4b0-99002d08dba9",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clinicPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clinicEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custodial profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41dbe3a9-efca-4b72-a543-b58ac98dc070",
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"mrn\":\"{{$randomInt}}\",\"targetTimezone\":\"US/Eastern\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{custodialUserId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{custodialUserId}}",
										"profile"
									]
								},
								"description": "Setting up Name, clinic name, role and telephone number."
							},
							"response": []
						},
						{
							"name": "Upload device data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b9cf43a-8c79-47b0-9e17-02f9fb0214ba",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
											"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
											"",
											"function randomString(length, chars) {",
											"    var result = '';",
											"    for (var i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];",
											"    return result;",
											"}",
											"",
											"pm.variables.set(\"uploadId\", \"upid_\" + randomString(12,'0123456789abcdefg'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d0b1561e-efe4-496b-89f7-986d2badf171",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"normal\": 2.47,\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": 8.437136946389211\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						},
						{
							"name": "Retrieve last SMBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload meter data."
							},
							"response": []
						},
						{
							"name": "Retrieve last CBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{custodialUserId}}?latest=true&type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{custodialUserId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Create note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3341c83a-bc9a-4043-8c8b-8020bf5c8639",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"messageId\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81ca11e7-581c-4bc9-adaf-d498f2f65a48",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"messageGUI\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"noteCreationTime\", now.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Increasing nighttime basal rate\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/send/{{custodialUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"send",
										"{{custodialUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72de232c-c03c-48c1-bc41-017b8aeece31",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
											"",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Clinician adds new custodial patient, uploads data, and creates notes. Custodial patient claims account.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DSA signup and setup",
					"item": [
						{
							"name": "DSA sign-up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "72e6dbe1-2283-44b9-8e51-76fbab62e71a",
										"exec": [
											"var moment = require('moment');",
											"pm.variables.set(\"currentTimestamp\", moment().unix());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aef68e59-fa85-4675-bd0c-d73bcfc4f666",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 1000, true, null,\"\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"qa+automated{{currentTimestamp}}@tidepool.org\",\"password\":\"tidepoolrocks\",\"emails\":[\"qa+automated{{currentTimestamp}}@tidepool.org\"],\"roles\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									]
								},
								"description": "Initial sign-up for a data storage account, which includes creation of the \n    \n    `userId`\n    "
							},
							"response": []
						},
						{
							"name": "Send email verification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fb5a1e8-5b9d-45d1-ac8c-0c0f0352ee5e",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/send/signup/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"signup",
										"{{userId}}"
									]
								},
								"description": "Send the email confirmation using the `userId` we picked up in the last request."
							},
							"response": []
						},
						{
							"name": "Retrieve email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"emailKey\", jsonData[0].key);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/signup/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"signup",
										"{{userId}}"
									]
								},
								"description": "Get `emailKey` to use in next request to confirm email"
							},
							"response": []
						},
						{
							"name": "Confirm email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/accept/signup/{{emailKey}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"accept",
										"signup",
										"{{emailKey}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Using `emailKey` to confirm email."
							},
							"response": []
						},
						{
							"name": "Accept terms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userSchema\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41dbe3a9-efca-4b72-a543-b58ac98dc070",
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"    pm.variables.set(\"currentTimestamp\", moment().format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"updates\":{\"termsAccepted\":\"{{currentTimestamp}}\"}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/auth/user",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"user"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Accepting Terms and conditions"
							},
							"response": []
						},
						{
							"name": "Initial DSA profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ca1ca55-a3d4-4146-8b96-5ce198579252",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41dbe3a9-efca-4b72-a543-b58ac98dc070",
										"exec": [
											"var moment = require('moment');\r",
											"let newMoment = moment().subtract(18, 'years');\r",
											"pm.variables.set(\"birthdate\", newMoment.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{$randomFullName}}\",\"patient\":{\"birthday\":\"{{birthdate}}\",\"diagnosis date\":\"{{birthdate}}\"}}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Setting up Name and birthdate (18 years old) for the new user."
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3848609-36dc-4ef7-86d6-9a21656afffa",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								},
								"description": "Verify user profile stored successfully."
							},
							"response": []
						},
						{
							"name": "Change BG Units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "286773f3-b1b1-46b0-8e63-ca6cda0f5cca",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userSettingsSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bgTarget\":{\"high\":10,\"low\":3.9},\"units\":{\"bg\":\"mmol/L\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/settings",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"settings"
									]
								},
								"description": "Changing BG units to mmol/L, another aspect a user can change in the user profile."
							},
							"response": []
						},
						{
							"name": "Retrieve settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bef1356d-82ff-4212-9b5a-d6f6c41afd02",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"userSettingsSchema\");",
											"",
											"pm.test(\"Verify settings change to mmol\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.units.bg).to.eql(\"mmol/L\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/settings",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"settings"
									]
								},
								"description": "Verifying the change to mmol/L was stored."
							},
							"response": []
						},
						{
							"name": "Tidepool data donation opt-in",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "146fda7e-6cd2-47e1-8aa0-38e678d68fc0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10167115-0928-4636-8932-0296b3ad66b5",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"careteamInviteSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"email\":\"bigdata@tidepool.org\",\"permissions\":{\"view\":{},\"note\":{}}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Data donation selection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "146fda7e-6cd2-47e1-8aa0-38e678d68fc0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10167115-0928-4636-8932-0296b3ad66b5",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json(),\"careteamInviteSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"email\":\"bigdata+JDRF@tidepool.org\",\"permissions\":{\"view\":{},\"note\":{}}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tidepool data donation opt-out",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "146fda7e-6cd2-47e1-8aa0-38e678d68fc0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10167115-0928-4636-8932-0296b3ad66b5",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/{{userId}}/invited/bigdata@tidepool.org",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"{{userId}}",
										"invited",
										"bigdata@tidepool.org"
									]
								},
								"description": "This removes the data donation option and makes sure our test accounts aren't being added to the data pool."
							},
							"response": []
						},
						{
							"name": "Remove data donation selection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "146fda7e-6cd2-47e1-8aa0-38e678d68fc0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10167115-0928-4636-8932-0296b3ad66b5",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/confirm/{{userId}}/invited/bigdata+JDRF@tidepool.org",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"{{userId}}",
										"invited",
										"bigdata+JDRF@tidepool.org"
									]
								},
								"description": "This removes the data donation selection 'JDRF' and makes sure our test accounts aren't being added to the data pool."
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a9c738-74ab-403a-9f63-7e963c699683",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "The initial interactions a user goes through to sign up for tidepool and set up their profile.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35368ac4-6b62-4347-b750-5c39b29e5fc7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35b9075a-db02-40b0-8b6e-eb06a67a7ef2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DSAs clincian appt",
					"item": [
						{
							"name": "DSA login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5875c19d-624c-4941-b2aa-f9dc2c263109",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{loginPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{loginEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3848609-36dc-4ef7-86d6-9a21656afffa",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload device data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b9cf43a-8c79-47b0-9e17-02f9fb0214ba",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"uploadDeviceDataItemId\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
											"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
											"",
											"function randomString(length, chars) {",
											"    var result = '';",
											"    for (var i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];",
											"    return result;",
											"}",
											"",
											"pm.variables.set(\"uploadId\", \"upid_\" + randomString(12,'0123456789abcdefg'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d0b1561e-efe4-496b-89f7-986d2badf171",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"type\": \"smbg\",\n    \"subType\": \"manual\",\n    \"units\": \"mg/dL\",\n    \"value\": 205.331314156239124,\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceId\": \"meter-123\",\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\",\n    \"id\": \"{{uploadDeviceDataItemId}}\",\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"timezoneOffset\": 600,\n    \"uploadId\": \"{{uploadId}}\"\n},\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"normal\": 2.47,\n        \"payload\": {\n            \"logIndices\": [\n                2\n            ]\n        },\n        \"subType\": \"normal\",\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"bolus\",\n        \"uploadId\": \"{{uploadId}}\"\n    },\n    {\n        \"clockDriftOffset\": -579000,\n        \"conversionOffset\": 0,\n        \"deviceId\": \"pump-123\",\n        \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n        \"guid\": \"{{uploadDeviceDataItemId}}\",\n        \"payload\": {\n            \"logIndices\": [\n                1\n            ],\n            \"type\": [\n                \"Five Minute Reading (FMR)\"\n            ]\n        },\n        \"time\": \"{{uploadDeviceDataItemTime}}\",\n        \"timezoneOffset\": -300,\n        \"type\": \"cbg\",\n        \"units\": \"mmol/L\",\n        \"uploadId\": \"{{uploadId}}\",\n        \"value\": 8.437136946389211\n    }\n]"
								},
								"url": {
									"raw": "{{api}}/data/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									]
								},
								"description": "uploading smbg, cbg and bolus data"
							},
							"response": []
						},
						{
							"name": "Retrieve last SMBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload meter data."
							},
							"response": []
						},
						{
							"name": "Retrieve last CBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Create note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3341c83a-bc9a-4043-8c8b-8020bf5c8639",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"messageId\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81ca11e7-581c-4bc9-adaf-d498f2f65a48",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"messageGUI\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"noteCreationTime\", now.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"guid\": \"{{messageGUI}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\":\"{{userId}}\",\n        \"timestamp\": \"{{noteCreationTime}}}\",\n        \"messagetext\": \"Forgot to Bolus for Meal\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/send/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"send",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72de232c-c03c-48c1-bc41-017b8aeece31",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
											"",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invite clinician to see data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99a4bf66-ae97-4a85-8484-6f5cd07752dd",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");",
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"inviteKey\", jsonData.key);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "046412cf-93d9-4a0f-bfb8-92d537d10a26",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"qa+clinician@tidepool.org\",\n  \"permissions\": {\n    \"view\": {},\n    \"note\":{},\n    \"upload\":{}\n  }\n}"
								},
								"url": {
									"raw": "{{api}}/confirm/send/invite/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"send",
										"invite",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a9c738-74ab-403a-9f63-7e963c699683",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clincian login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b59cdb1-4486-485b-b4b0-99002d08dba9",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"clinicUserId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clinicPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clinicEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm invitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bff4f3c-8736-48b9-a8e3-3af90aec4333",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"type": "text",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"key\":\"{{inviteKey}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/confirm/accept/invite/{{clinicUserId}}/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"confirm",
										"accept",
										"invite",
										"{{clinicUserId}}",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve user profile (clinic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3848609-36dc-4ef7-86d6-9a21656afffa",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/metadata/{{userId}}/profile",
									"host": [
										"{{api}}"
									],
									"path": [
										"metadata",
										"{{userId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve last SMBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=smbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "smbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload meter data."
							},
							"response": []
						},
						{
							"name": "Retrieve last CBG data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"cbgSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=cbg",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "cbg"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last bolus data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
										"exec": [
											"let jsonData = pm.response.json();",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, jsonData,\"bolusSchema\");",
											"",
											"pm.test(\"one item is returned\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"the returned item is the same that we uploaded\", function () {",
											"    pm.expect(jsonData[0].guid).to.eql(pm.variables.get(\"uploadDeviceDataItemId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api}}/data/{{userId}}?latest=true&type=bolus",
									"host": [
										"{{api}}"
									],
									"path": [
										"data",
										"{{userId}}"
									],
									"query": [
										{
											"key": "startDate",
											"value": "{{dDataStartDate}}",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "{{dDataEndDate}}",
											"disabled": true
										},
										{
											"key": "latest",
											"value": "true"
										},
										{
											"key": "type",
											"value": "bolus"
										}
									]
								},
								"description": "Verifying the data was stored from previous request to upload pump data."
							},
							"response": []
						},
						{
							"name": "Retrieve last note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72de232c-c03c-48c1-bc41-017b8aeece31",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");",
											"",
											"pm.test(\"Note retrieved is the same one we created\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.messages[0].guid).to.eql(pm.variables.get(\"messageGUI\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/message/thread/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"thread",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment on note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3341c83a-bc9a-4043-8c8b-8020bf5c8639",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81ca11e7-581c-4bc9-adaf-d498f2f65a48",
										"exec": [
											"const uuid = require('uuid');",
											"pm.variables.set(\"messageGUI\", uuid.v4());",
											"const moment = require('moment');",
											"let now = moment();",
											"pm.variables.set(\"noteCreationTime\", now.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": {\n        \"parentmessage\": \"{{messageId}}\",\n        \"userid\": \"{{userId}}\",\n        \"groupid\": \"{{clinicUserId}}\",\n        \"messagetext\": \"Clinician comment\",\n        \"timestamp\": \"{{noteCreationTime}}\",\n        \"guid\": \"{{messageGUI}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{api}}/message/reply/{{messageId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"message",
										"reply",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of tidepool",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a9c738-74ab-403a-9f63-7e963c699683",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 300, false, null, \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api}}/auth/logout",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "DSA login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5875c19d-624c-4941-b2aa-f9dc2c263109",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.variables.set(\"userId\", jsonData.userid);",
											"pm.variables.set(\"sessionToken\", pm.response.headers.get(\"x-tidepool-session-token\"));",
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, true, jsonData,\"userSchema\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{loginPw}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{loginEmail}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api}}/auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"auth",
										"login"
									],
									"query": [
										{
											"key": "x-tidepool-session-token",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove clinician from share",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99a4bf66-ae97-4a85-8484-6f5cd07752dd",
										"exec": [
											"const assert = eval(globals.loadAsserts);",
											"assert.common(200, 1000, false, null,\"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "046412cf-93d9-4a0f-bfb8-92d537d10a26",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-tidepool-session-token",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/access/{{userId}}/{{clinicUserId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"access",
										"{{userId}}",
										"{{clinicUserId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "DSA that uploads data to their Tidepool Account, adds notes and shares data with their clinician in preparation for a clinic appointment.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f987ed1e-6c19-4265-b810-526efc61f5c5",
				"type": "text/javascript",
				"exec": [
					"const userSchema = { \"required\": [\"userid\", \"username\", \"emails\", \"emailVerified\", \"termsAccepted\"], \"properties\": { \"emailVerified\": { \"type\": \"boolean\" }, \"emails\": { \"type\": \"array\" }, \"userid\": { \"type\": \"string\" }, \"username\": { \"type\": \"string\" }, \"termsAccepted\": { \"type\": \"string\" } } };",
					"const messageAddedSchema = { \"required\": [\"id\"], \"properties\": { \"id\": { \"type\": \"string\" } } };",
					"const messagesSchema = { \"type\": \"array\", \"items\": { \"required\": [\"id\", \"guid\", \"parentmessage\", \"userid\", \"groupid\", \"timestamp\", \"createdtime\", \"messagetext\", \"user\"], \"properties\": { \"id\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"userid\": { \"type\": \"string\" }, \"groupid\": { \"type\": \"string\" }, \"timestamp\": { \"type\": \"string\" }, \"createdtime\": { \"type\": \"string\" }, \"messagetext\": { \"type\": \"string\" }, \"user\": { \"type\": \"object\" } } } };",
					"const smbgsSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const cbgSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const bolusSchema = { \"type\": \"array\", \"items\": { \"required\": [\"clockDriftOffset\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"uploadId\"], \"properties\": { \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"normal\": {\"type\": \"number\"}, \"extended\":{\"type\": \"integer\"}, \"expectedExtended\":{\"type\": \"integer\"}, \"duration\":{\"type\": \"integer\"}, \"expectedDuration\":{\"type\": \"integer\"}, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" } } } }",
					"const userProfileSchema = {\"required\": [\"fullName\"], \"properties\": { \"fullName\": { \"type\": \"string\" },",
					"\"patient\": { \"type\": \"object\" }, \"clinic\": {\"type\": \"object\"}}};",
					"const careteamInviteSchema = { \"required\": [\"key\", \"type\", \"email\", \"creatorId\", \"creator\", \"context\", \"created\"], \"properties\": { \"key\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"email\": { \"type\": \"string\" }, \"creatorId\": { \"type\": \"string\" }, \"creator\": { \"type\": \"object\" }, \"context\": { \"type\": \"object\" }, \"created\": { \"type\": \"string\" } } };",
					"const userSettingsSchema = { \"required\": [\"bgTarget\", \"units\"], \"properties\": { \"bgTarget\": { \"type\": \"object\" }, \"units\": { \"type\": \"object\" } } };",
					"",
					"pm.globals.set(\"userSchema\", JSON.stringify(userSchema));",
					"pm.globals.set(\"userProfileSchema\", JSON.stringify(userProfileSchema));",
					"pm.globals.set(\"messageAddedSchema\", JSON.stringify(messageAddedSchema));",
					"pm.globals.set(\"messagesSchema\", JSON.stringify(messagesSchema));",
					"pm.globals.set(\"smbgsSchema\", JSON.stringify(smbgsSchema));",
					"pm.globals.set(\"cbgSchema\", JSON.stringify(cbgSchema));",
					"pm.globals.set(\"bolusSchema\", JSON.stringify(bolusSchema));",
					"pm.globals.set(\"careteamInviteSchema\", JSON.stringify(careteamInviteSchema));",
					"pm.globals.set(\"userSettingsSchema\", JSON.stringify(userSettingsSchema));",
					"",
					"pm.globals.set('loadAsserts', function loadAsserts() {",
					"    let asserts = {};",
					"    asserts.responseTimeMsLessThan = function responseTimeMsLessThan(ms) {",
					"        pm.test(\"Response time is less than \"+ms+\"ms\", function () {",
					"            //pm.expect(pm.response.responseTime).to.be.below(ms);",
					"            console.log(\"Expected response in ms under \",ms);",
					"            console.log(\"Actual response time in ms \",pm.response.responseTime);",
					"        });",
					"    };",
					"    asserts.responseTypeJson = function responseTypeJson() {",
					"        pm.test(\"Response type is application/json\", function () {",
					"            pm.expect(pm.response.headers.get(\"content-type\")).to.equal('application/json');",
					"        });",
					"    };",
					"    asserts.responseHasSessionToken = function responseHasSessionToken() {",
					"        pm.test(\"Response has x-tidepool-session-token\", function () {",
					"            pm.response.to.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseHasNoSessionToken = function responseHasNoSessionToken(){",
					"         pm.test(\"Response has NO x-tidepool-session-token\", function () {",
					"            pm.response.to.not.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseBodyMatchesSchema = function responseBodyMatchesSchema(jsonData,schemaName) {",
					"         pm.test(\"Response body matches \"+schemaName, function () {",
					"            let schema = JSON.parse(pm.globals.get(schemaName));",
					"            pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
					"         });",
					"    };",
					"    asserts.responseStatusCodeIs = function responseStatusCodeIs(code){",
					"        pm.test(\"Response status is \"+code, function () {",
					"            pm.response.to.have.status(code);",
					"        });",
					"    };",
					"    asserts.common = function common(expectedCode, durationMs, hasSessionToken, jsonData, schemaName){",
					"            asserts.responseStatusCodeIs(expectedCode);",
					"            asserts.responseTimeMsLessThan(durationMs);",
					"            if(hasSessionToken){",
					"                assert.responseHasSessionToken();",
					"            }else{",
					"                assert.responseHasNoSessionToken();",
					"            }",
					"            if (jsonData!==null){",
					"                assert.responseTypeJson();",
					"                assert.responseBodyMatchesSchema(jsonData,schemaName);",
					"            }",
					"    };",
					"    return asserts;",
					"} + '; loadAsserts();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b04618b8-a2c4-4490-b326-590f904d632c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
